-- wow congrats
-- idk why i obsufcated even though the developer will never fix the game
-- guess i was just embarresed to expose my terrible scripting skills

-- Eu's AOT Ui v 1.0.0
-- Offical Release
-- View Changelog in "Changes" tab
-- Make Sure to Join The Discord! (in credits tab) 

--IMPORTANT:
-- IF YOU ARE GOING TO SHOWCASE THIS SCRIPT MAKE SURE TO GIVE CREDIT <3



-- This file was generated using Luraph Obfuscator v12.3 by memcorrupt.

local ii1iiIi1IiIII111i11 = assert local iil1i1Ilil1iiIillli = select local IllilIlllliililIII1 = tonumber local lIllI1I1liiiIlllI111i = unpack local l1llIlI111111Ill1iI = pcall local l1lIIll1ll1iIll1i11 = setfenv local liI1lI11lilI1liII1I = setmetatable local liiiI1l1lIl1i1iii1I = type local lIllIll1li111ilIll1ll = getfenv local i1liiIlllili111i1ll = tostring local l1IliiIili1lIiIIllI = error local lIli1lll11l1llIIlll11 = string.sub local lIl11iIiiIllillIl11II = string.byte local llil1i1l11lIl1I1l1I = string.char local l111lIiili1IiiIiiiI = string.rep local lIliillIIilIiI11l11II = string.gsub local ilI1iI1IIi1i1illlII = string.match local lIl1I1lI1llI1ililIlli = lIl11iIiiIllillIl11II("b", 1) local lIlll1IiI1iiiIl1ilI, I1ill1l1illIlIIllII = #{1676}, #{ 3493, 6265, 1084, 5949, 6103, 5185, 5297, 6659, 5431, 6120, 3114, 5094, 1339, 1221, 2992, 1179, 2018, 435, 3469, 5729, 10, 1537 } + lIl1I1lI1llI1ililIlli + 130951 local I1lIIi1illi1i1II1Il = {} local lIlii1iliiiII1llIi1Il = 1 local Il1ilIIli11l1lIlIil, i11II1l11ilIlIiiI11 local function IIlII1ili1l1IIl1iii(lIlil1lll1iIIlI1i11ii, lIl1iiIlli11IIl11l1li) local lIliIii11Ii1iliIIilI1 lIlil1lll1iIIlI1i11ii = lIliillIIilIiI11l11II(lIli1lll11l1llIIlll11(lIlil1lll1iIIlI1i11ii, 5), "..", function(I11II1IIII11iliIIl1) if lIl11iIiiIllillIl11II(I11II1IIII11iliIIl1, 2) == 72 then lIliIii11Ii1iliIIilI1 = IllilIlllliililIII1(lIli1lll11l1llIIlll11(I11II1IIII11iliIIl1, 1, 1)) return "" else local ii11I1illIIl1I11l1I = llil1i1l11lIl1I1l1I(IllilIlllliililIII1(I11II1IIII11iliIIl1, 16)) if lIliIii11Ii1iliIIilI1 then local lIlIlillllIIlIIl1Ii1i = l111lIiili1IiiIiiiI(ii11I1illIIl1I11l1I, lIliIii11Ii1iliIIilI1) lIliIii11Ii1iliIIilI1 = nil return lIlIlillllIIlIIl1Ii1i else return ii11I1illIIl1I11l1I end end end) local function IIIilI1iiIlIIl1lIi1() local iIiIlIli1iiIlIl1IIl = lIl11iIiiIllillIl11II(lIlil1lll1iIIlI1i11ii, lIlii1iliiiII1llIi1Il, lIlii1iliiiII1llIi1Il) lIlii1iliiiII1llIi1Il = lIlii1iliiiII1llIi1Il + 1 return iIiIlIli1iiIlIl1IIl end local function lIillill1ii1i1liiil() local iIiIlIli1iiIlIl1IIl, ii11I1illIIl1I11l1I, lIlIlillllIIlIIl1Ii1i, iIliiIIIlIilll1ilI1 = lIl11iIiiIllillIl11II(lIlil1lll1iIIlI1i11ii, lIlii1iliiiII1llIi1Il, lIlii1iliiiII1llIi1Il + 3) lIlii1iliiiII1llIi1Il = lIlii1iliiiII1llIi1Il + 4 return iIliiIIIlIilll1ilI1 * 16777216 + lIlIlillllIIlIIl1Ii1i * 65536 + ii11I1illIIl1I11l1I * 256 + iIiIlIli1iiIlIl1IIl end local function lIliIIi1lIIIl1IIiII1l(lIl1l1l11il11Ilii1I11, IIiI1li1lIIiIiiIiii, lIlIliil1lllli1iilIIi) if lIlIliil1lllli1iilIIi then local il11lii1i1iIIill1I1, i11II1lIIIl11iiIli1 = 0, 0 for lIil1III1l1i1i11l1I = IIiI1li1lIIiIiiIiii, lIlIliil1lllli1iilIIi do il11lii1i1iIIill1I1 = il11lii1i1iIIill1I1 + 2 ^ i11II1lIIIl11iiIli1 * lIliIIi1lIIIl1IIiII1l(lIl1l1l11il11Ilii1I11, lIil1III1l1i1i11l1I) i11II1lIIIl11iiIli1 = i11II1lIIIl11iiIli1 + 1 end return il11lii1i1iIIill1I1 else local l1i1llili1I1II11liI = 2 ^ (IIiI1li1lIIiIiiIiii - 1) return l1i1llili1I1II11liI <= lIl1l1l11il11Ilii1I11 % (l1i1llili1I1II11liI + l1i1llili1I1II11liI) and 1 or 0 end end local function lIllllIl1IIiIiIllliII() local iIiIlIli1iiIlIl1IIl, ii11I1illIIl1I11l1I = lIillill1ii1i1liiil(), lIillill1ii1i1liiil() if iIiIlIli1iiIlIl1IIl == 0 and ii11I1illIIl1I11l1I == 0 then return 0 end return (-2 * lIliIIi1lIIIl1IIiII1l(ii11I1illIIl1I11l1I, 32) + 1) * 2 ^ (lIliIIi1lIIIl1IIiII1l(ii11I1illIIl1I11l1I, 21, 31) - 1023) * ((lIliIIi1lIIIl1IIiII1l(ii11I1illIIl1I11l1I, 1, 20) * 4294967296 + iIiIlIli1iiIlIl1IIl) / 4503599627370496 + 1) end local l1iilll1I1IIlil1iII = function(iIiIlIli1iiIlIl1IIl, ii11I1illIIl1I11l1I) local i11li1lI1lIii1ilIiI = 1 local lIlIlillllIIlIIl1Ii1i = 0 while iIiIlIli1iiIlIl1IIl > 0 and ii11I1illIIl1I11l1I > 0 do local IIl111IIliIiIiIii11 = iIiIlIli1iiIlIl1IIl % 2 local lii1i1ll1Ili1i1II11 = ii11I1illIIl1I11l1I % 2 if IIl111IIliIiIiIii11 ~= lii1i1ll1Ili1i1II11 then lIlIlillllIIlIIl1Ii1i = lIlIlillllIIlIIl1Ii1i + i11li1lI1lIii1ilIiI end iIiIlIli1iiIlIl1IIl = (iIiIlIli1iiIlIl1IIl - IIl111IIliIiIiIii11) / 2 ii11I1illIIl1I11l1I = (ii11I1illIIl1I11l1I - lii1i1ll1Ili1i1II11) / 2 i11li1lI1lIii1ilIiI = i11li1lI1lIii1ilIiI * 2 end if iIiIlIli1iiIlIl1IIl < ii11I1illIIl1I11l1I then iIiIlIli1iiIlIl1IIl = ii11I1illIIl1I11l1I end while iIiIlIli1iiIlIl1IIl > 0 do local IIl111IIliIiIiIii11 = iIiIlIli1iiIlIl1IIl % 2 if IIl111IIliIiIiIii11 > 0 then lIlIlillllIIlIIl1Ii1i = lIlIlillllIIlIIl1Ii1i + i11li1lI1lIii1ilIiI end iIiIlIli1iiIlIl1IIl = (iIiIlIli1iiIlIl1IIl - IIl111IIliIiIiIii11) / 2 i11li1lI1lIii1ilIiI = i11li1lI1lIii1ilIiI * 2 end return lIlIlillllIIlIIl1Ii1i end local function I1l11iiillIi1IlilIl(iIIllI1ll1IIIIIii1I) local iliiI1lI1iiiI1llI1I = { lIl11iIiiIllillIl11II(lIlil1lll1iIIlI1i11ii, lIlii1iliiiII1llIi1Il, lIlii1iliiiII1llIi1Il + 3) } lIlii1iliiiII1llIi1Il = lIlii1iliiiII1llIi1Il + 4 local iIiIlIli1iiIlIl1IIl = l1iilll1I1IIlil1iII(iliiI1lI1iiiI1llI1I[1], i11II1l11ilIlIiiI11) local ii11I1illIIl1I11l1I = l1iilll1I1IIlil1iII(iliiI1lI1iiiI1llI1I[2], i11II1l11ilIlIiiI11) local lIlIlillllIIlIIl1Ii1i = l1iilll1I1IIlil1iII(iliiI1lI1iiiI1llI1I[3], i11II1l11ilIlIiiI11) local iIliiIIIlIilll1ilI1 = l1iilll1I1IIlil1iII(iliiI1lI1iiiI1llI1I[4], i11II1l11ilIlIiiI11) i11II1l11ilIlIiiI11 = (225 * i11II1l11ilIlIiiI11 + iIIllI1ll1IIIIIii1I) % 256 return iIliiIIIlIilll1ilI1 * 16777216 + lIlIlillllIIlIIl1Ii1i * 65536 + ii11I1illIIl1I11l1I * 256 + iIiIlIli1iiIlIl1IIl end local function lliIIIiIIl1l1llIi11(lIlIll111iIlii1l1IIII) local lIlill1il111IIilii1il = lIillill1ii1i1liiil() local iIli1lilllll1ill111 = "" for lIil1III1l1i1i11l1I = 1, lIlill1il111IIilii1il do iIli1lilllll1ill111 = iIli1lilllll1ill111 .. llil1i1l11lIl1I1l1I(l1iilll1I1IIlil1iII(lIl11iIiiIllillIl11II(lIlil1lll1iIIlI1i11ii, lIlii1iliiiII1llIi1Il + lIil1III1l1i1i11l1I - 1), Il1ilIIli11l1lIlIil)) Il1ilIIli11l1lIlIil = (lIlIll111iIlii1l1IIII * Il1ilIIli11l1lIlIil + 163) % 256 end lIlii1iliiiII1llIi1Il = lIlii1iliiiII1llIi1Il + lIlill1il111IIilii1il return iIli1lilllll1ill111 end Il1ilIIli11l1lIlIil = IIIilI1iiIlIIl1lIi1() i11II1l11ilIlIiiI11 = IIIilI1iiIlIIl1lIi1() local function llliiIiI11il1IlilI1() local i1ii1Ilii1111iiilII = { [54658] = {}, [124340] = {}, [37659] = {}, [106926] = {} } i1ii1Ilii1111iiilII[79976] = IIIilI1iiIlIIl1lIi1() local il1i1Ililiil1ll1liI = lIillill1ii1i1liiil() - (#{ 4667, 2884, 2864, 5746, 2848, 2596, 3173, 4480, 889, 4338, 5488, 2567, 6519, 6718, 5817, 4313, 152, 3208, 2437, 3165, 4513, 1250, 3094, 469 } + lIl1I1lI1llI1ililIlli + 133593) local I111IIlIII1lilll1lI = IIIilI1iiIlIIl1lIi1() for lIil1III1l1i1i11l1I = lIlll1IiI1iiiIl1ilI, il1i1Ililiil1ll1liI do local Ii1lI1iil1lI1I11IiI = {} local Iil111I1I1l1IlilIIi = I1l11iiillIi1IlilIl(I111IIlIII1lilll1lI) Ii1lI1iil1lI1I11IiI[45812] = lIliIIi1lIIIl1IIiII1l(Iil111I1I1l1IlilIIi, #{ 1688, 1703, 2654, 5997, 5963, 6444, 1020, 3374, 930, 5774, 3879, 3987, 5417, 6774, 3018, 2659, 935, 1117, 1634 }, #{ 3170, 1599, 6836, 6006, 5156, 4992, 182, 1966, 2901, 1408, 2848, 6663, 1004, 6506, 5418, 2745, 2766, 1666, 603, 6650, 6582 } + lIl1I1lI1llI1ililIlli + -93) Ii1lI1iil1lI1I11IiI[3280] = lIliIIi1lIIIl1IIiII1l(Iil111I1I1l1IlilIIi, #{ 5927, 5056, 735, 2276, 1032, 4964, 4863, 2272, 2157, 6766 }, #{ 1484, 139, 1683, 4828, 1693, 3439, 6086, 1665, 292, 4648, 3124, 2544, 6589, 2891, 2832, 3646, 541, 5214 }) Ii1lI1iil1lI1I11IiI[102038] = lIliIIi1lIIIl1IIiII1l(Iil111I1I1l1IlilIIi, #{4733}, #{ 3071, 2532, 3071, 4908, 1743, 3730, 4430, 376, 3473, 5801, 1656, 1054, 2446, 1399, 3393, 2035, 3228, 2814 }) Ii1lI1iil1lI1I11IiI[21946] = lIliIIi1lIIIl1IIiII1l(Iil111I1I1l1IlilIIi, #{6092}, #{ 1969, 5868, 4359, 4751, 4874, 3388, 3249, 4457, 3578 }) Ii1lI1iil1lI1I11IiI[109903] = lIliIIi1lIIIl1IIiII1l(Iil111I1I1l1IlilIIi, #{ 545, 1711, 5132, 3352, 6778, 2231, 480, 5683, 2731, 2159, 4402, 1662, 445, 320, 4708, 3191, 3591, 1569, 4191, 4067, 5643, 3988 } + lIl1I1lI1llI1ililIlli + -93, #{ 534, 4237, 3319, 3374, 1988, 5796, 5459, 2744, 5507, 289, 4308, 5901, 4707, 2877, 1411, 6292, 145, 1197, 177, 777, 2352, 6484 } + lIl1I1lI1llI1ililIlli + -88) i1ii1Ilii1111iiilII[37659][lIil1III1l1i1i11l1I] = Ii1lI1iil1lI1I11IiI end local il1i1Ililiil1ll1liI = lIillill1ii1i1liiil() for lIil1III1l1i1i11l1I = lIlll1IiI1iiiIl1ilI, il1i1Ililiil1ll1liI do i1ii1Ilii1111iiilII[54658][lIil1III1l1i1i11l1I - lIlll1IiI1iiiIl1ilI] = llliiIiI11il1IlilI1() end IIIilI1iiIlIIl1lIi1() local il1i1Ililiil1ll1liI = lIillill1ii1i1liiil() for lIil1III1l1i1i11l1I = lIlll1IiI1iiiIl1ilI, il1i1Ililiil1ll1liI do i1ii1Ilii1111iiilII[124340][lIil1III1l1i1i11l1I] = lIillill1ii1i1liiil() end i1ii1Ilii1111iiilII[88682] = IIIilI1iiIlIIl1lIi1() local il1i1Ililiil1ll1liI = lIillill1ii1i1liiil() - (#{ 2238, 2570, 1761, 4381, 147, 3400, 4055, 2208, 6274, 1879, 4091, 6618, 6676, 5679, 5834, 2547, 5015, 5217, 6581, 2083, 6758 } + lIl1I1lI1llI1ililIlli + 133610) local iI11ilIl11IIi11lIll = IIIilI1iiIlIIl1lIi1() for lIil1III1l1i1i11l1I = lIlll1IiI1iiiIl1ilI, il1i1Ililiil1ll1liI do local iiiii11IliiI1illIll = {} local liiiI1l1lIl1i1iii1I = IIIilI1iiIlIIl1lIi1() if liiiI1l1lIl1i1iii1I == #{ 1482, 5029, 5001, 4532, 271, 3262, 4444, 6120, 4759, 3670, 4793, 6379, 4472, 4142, 2031, 2342, 2591, 1519, 3999, 3982, 4856, 2290, 6118 } + lIl1I1lI1llI1ililIlli + -85 then iiiii11IliiI1illIll[131002] = lIllllIl1IIiIiIllliII() end if liiiI1l1lIl1i1iii1I == #{ 1585, 5806, 396, 3747, 3347, 3781, 6908, 4128, 2001, 743, 5296, 6936, 5525, 6554, 5515, 1048, 3294, 5108, 6343, 6922, 1807, 6124 } + lIl1I1lI1llI1ililIlli + 89 then iiiii11IliiI1illIll[131002] = lIllllIl1IIiIiIllliII() end if liiiI1l1lIl1i1iii1I == #{ 3273, 1761, 5384, 5302, 1169, 6489, 4980, 6569, 5290, 6364, 5429, 191, 4588, 4523, 2869, 5768, 5584, 4069, 3319, 6827, 137, 1165 } + lIl1I1lI1llI1ililIlli + 92 then iiiii11IliiI1illIll[131002] = lIllllIl1IIiIiIllliII() end if liiiI1l1lIl1i1iii1I == #{ 5006, 3462, 6087, 1871, 5595, 4591, 4082, 3621, 2545, 3128, 4562, 2843, 6549, 2104, 4171, 976, 1382, 1236, 3241, 3130, 2122 } + lIl1I1lI1llI1ililIlli + 46 then iiiii11IliiI1illIll[131002] = lIillill1ii1i1liiil() end if liiiI1l1lIl1i1iii1I == #{ 5473, 5912, 3267, 4089, 6140, 4258, 2056, 5467, 6323, 4504, 1897, 5854, 1487, 4409, 392, 5617, 1305, 6753, 2755, 6499, 3828 } + lIl1I1lI1llI1ililIlli + -91 then iiiii11IliiI1illIll[131002] = lliIIIiIIl1l1llIi11(iI11ilIl11IIi11lIll) end if liiiI1l1lIl1i1iii1I == #{ 3005, 6227, 3565, 4854, 1832, 2736, 2258, 2095, 5590, 3978, 6065, 2738, 728, 5256, 841, 3720, 3302, 6305, 4922, 4297, 1358, 6598, 6341 } + lIl1I1lI1llI1ililIlli + -73 then iiiii11IliiI1illIll[131002] = #{ 5760, 1834, 4204, 5679, 343, 6598, 2342, 1389, 5052, 1200, 6179, 3720, 5738, 6825, 5067, 1049, 2674, 5397, 3278, 721, 6736, 1932 } + lIl1I1lI1llI1ililIlli + 83143 == #{ 5760, 1834, 4204, 5679, 343, 6598, 2342, 1389, 5052, 1200, 6179, 3720, 5738, 6825, 5067, 1049, 2674, 5397, 3278, 721, 6736, 1932 } + lIl1I1lI1llI1ililIlli + 83143 end if liiiI1l1lIl1i1iii1I == #{ 3763, 4223, 865, 1302, 418, 3057, 3723, 5296, 5991, 2115, 4172, 3992, 2298, 655, 3338, 987, 3719, 6737, 5328, 712, 4622, 6684 } + lIl1I1lI1llI1ililIlli + 47 then iiiii11IliiI1illIll[131002] = lliIIIiIIl1l1llIi11(iI11ilIl11IIi11lIll) end if liiiI1l1lIl1i1iii1I == #{ 761, 1536, 2236, 3554, 365, 6191, 4063, 1587, 5230, 45, 3038, 5170, 1495, 5283, 326, 3552, 5127, 4756, 4641, 6111, 4455, 6676, 3299 } + lIl1I1lI1llI1ililIlli + -26 then iiiii11IliiI1illIll[131002] = lIllllIl1IIiIiIllliII() + lIllllIl1IIiIiIllliII() end if liiiI1l1lIl1i1iii1I == #{ 2941, 6150, 250, 6046, 6899, 2418, 740, 2274, 2312, 5078, 1268, 5179, 1268, 564, 392, 5614, 6954, 6040, 2733, 1245, 2231, 3979, 4197, 3904 } + lIl1I1lI1llI1ililIlli + 16 then iiiii11IliiI1illIll[131002] = #{ 1343, 2059, 3875, 5475, 2520, 1890, 4923, 1537, 2376, 1429, 3261, 2658, 2554, 3798, 416, 1929, 6635, 1926, 4912, 6196, 727, 717, 5782, 5183 } + lIl1I1lI1llI1ililIlli + 41722 == #{ 532, 6234, 3908, 1113, 3509, 2757, 2233, 2589, 667, 455, 3972, 4553, 2668, 2389, 5478, 4069, 1553, 2828, 3722, 5967, 815, 930 } + lIl1I1lI1llI1ililIlli + 38928 end i1ii1Ilii1111iiilII[106926][lIil1III1l1i1i11l1I - lIlll1IiI1iiiIl1ilI] = iiiii11IliiI1illIll end IIIilI1iiIlIIl1lIi1() IIIilI1iiIlIIl1lIi1() lIillill1ii1i1liiil() lIillill1ii1i1liiil() IIIilI1iiIlIIl1lIi1() i1ii1Ilii1111iiilII[33680] = IIIilI1iiIlIIl1lIi1() lIillill1ii1i1liiil() lIillill1ii1i1liiil() return i1ii1Ilii1111iiilII end local function IillI1IliIilIliiIl1(i1ii1Ilii1111iiilII, lIl1iiIlli11IIl11l1li, lIll1l1Iiliilli1ill1i) local iliIi1IIliI1IIi1llI, IlI1IiiIIIIIll1iiIi = 30, 36 local lIlIIi1i11IiIlIlill = i1ii1Ilii1111iiilII[37659] local lIlIl111iI111lIl1Illi = liI1lI11lilI1liII1I({}, { __index = function(Ii1Illl1iIiIlilIl11, lIli1I1IlilIII1I11iI1) local iIli1lilllll1ill111 = i1ii1Ilii1111iiilII[106926][lIli1I1IlilIII1I11iI1] if lIli1lll11l1llIIlll11(liiiI1l1lIl1i1iii1I(iIli1lilllll1ill111[131002]), 1, 1) == "s" then return { [131002] = lIli1lll11l1llIIlll11(iIli1lilllll1ill111[131002], 6) } end return iIli1lilllll1ill111 end }) local lIlil1lIlI1iiiiii1llI = 33680 local lIliIliilIlll1IIlIil1 = i1ii1Ilii1111iiilII[54658] local lII1lil1liIilililll = 131002 local lIll1l1IIiiIii1iIlli1 = i1ii1Ilii1111iiilII[79976] local lIliilIllIiIIi111ili1 = i1ii1Ilii1111iiilII[88682] local lIliIli1Ill1l1l1ilIll = 109903 local iliiiiII11i11iIiIiI = i1ii1Ilii1111iiilII[124340] local lIi1lIllliiIiiIIIIi = 21946 local function I1I1iIIIi11llIIiI1l(...) local IlilIIlli1l1ilIiiIi = 0 local lIll111Iii1i1iI11Ii11 = { lIllI1I1liiiIlllI111i({}, 1, lIliilIllIiIIi111ili1) } local ill11liI1iIil1Ilil1 = 1 local Iliii11III1IiIl111l = {} local iIll1llIlI1iIi1lIi1 = {} local lIl1iiIlli11IIl11l1li = lIllIll1li111ilIll1ll() local i1IillI1i11i1iIliiI = { ... } local IiilllIlli1II11ii1l = #i1IillI1i11i1iIliiI - 1 for lIil1III1l1i1i11l1I = 0, IiilllIlli1II11ii1l do if lIil1III1l1i1i11l1I < lIll1l1IIiiIii1iIlli1 then lIll111Iii1i1iI11Ii11[lIil1III1l1i1i11l1I] = i1IillI1i11i1iIliiI[lIil1III1l1i1i11l1I + 1] end end local function Ili1iIiili1I1IiII1l(...) local lIlIlillllIIlIIl1Ii1i = iil1i1Ilil1iiIillli("#", ...) local Ii1Illl1iIiIlilIl11 = { ... } return lIlIlillllIIlIIl1Ii1i, Ii1Illl1iIiIlilIl11 end local function liIll11l1II1liIIIi1() while true do local l1Ii1iIll111i11i111 = lIlIIi1i11IiIlIlill[ill11liI1iIil1Ilil1] local IIiliI1llliIl11ll1i = l1Ii1iIll111i11i111[109903] ill11liI1iIil1Ilil1 = ill11liI1iIil1Ilil1 + 1 local lii1lI1lIiiiii1iI1I = l1Ii1iIll111i11i111[102038] local I11I11ilIllili1lIiI = l1Ii1iIll111i11i111[45812] local liIill11lI11lIi1I11 = l1Ii1iIll111i11i111[21946] local l1ii1llIIliIl1IIiII = l1Ii1iIll111i11i111[3280] local lIliiI1l1IIiIIii1Il11 = l1Ii1iIll111i11i111[102038] - I1ill1l1illIlIIllII if IIiliI1llliIl11ll1i >= 19 then if IIiliI1llliIl11ll1i < 28 then if IIiliI1llliIl11ll1i >= 23 then if IIiliI1llliIl11ll1i < 25 then if IIiliI1llliIl11ll1i ~= 24 then local llIl1lI11l1Ii1iIiI1, llIIi1llillII1i1iI1, liIll11l1II1liIIIi1 if liIill11lI11lIi1I11 ~= 1 then if liIill11lI11lIi1I11 ~= 0 then llIIi1llillII1i1iI1 = I11I11ilIllili1lIiI + liIill11lI11lIi1I11 - 1 else llIIi1llillII1i1iI1 = IlilIIlli1l1ilIiiIi end llIIi1llillII1i1iI1, llIl1lI11l1Ii1iIiI1 = Ili1iIiili1I1IiII1l(lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI](lIllI1I1liiiIlllI111i(lIll111Iii1i1iI11Ii11, I11I11ilIllili1lIiI + 1, llIIi1llillII1i1iI1))) else llIIi1llillII1i1iI1, llIl1lI11l1Ii1iIiI1 = Ili1iIiili1I1IiII1l(lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI]()) end if l1ii1llIIliIl1IIiII ~= 1 then if l1ii1llIIliIl1IIiII ~= 0 then llIIi1llillII1i1iI1 = I11I11ilIllili1lIiI + l1ii1llIIliIl1IIiII - 2 IlilIIlli1l1ilIiiIi = llIIi1llillII1i1iI1 + 1 else llIIi1llillII1i1iI1 = llIIi1llillII1i1iI1 + I11I11ilIllili1lIiI - 1 IlilIIlli1l1ilIiiIi = llIIi1llillII1i1iI1 end liIll11l1II1liIIIi1 = 0 for lIil1III1l1i1i11l1I = I11I11ilIllili1lIiI, llIIi1llillII1i1iI1 do liIll11l1II1liIIIi1 = liIll11l1II1liIIIi1 + 1 lIll111Iii1i1iI11Ii11[lIil1III1l1i1i11l1I] = llIl1lI11l1Ii1iIiI1[liIll11l1II1liIIIi1] end else IlilIIlli1l1ilIiiIi = I11I11ilIllili1lIiI - 1 end for lIil1III1l1i1i11l1I = IlilIIlli1l1ilIiiIi + 1, lIliilIllIiIIi111ili1 do lIll111Iii1i1iI11Ii11[lIil1III1l1i1i11l1I] = nil end else local liiliIl1IiIi1Il1li1 = lIliIliilIlll1IIlIil1[lii1lI1lIiiiii1iI1I] local lIlll1IlIliIillliIliI = {} if liiliIl1IiIi1Il1li1[lIlil1lIlI1iiiiii1llI] > 0 then do local Il1i1llI1lliiiIIl1i = {} lIlll1IlIliIillliIliI = liI1lI11lilI1liII1I({}, { __index = function(Ii1Illl1iIiIlilIl11, lIli1I1IlilIII1I11iI1) local iil1iiIi1I1Ili1l1iI = Il1i1llI1lliiiIIl1i[lIli1I1IlilIII1I11iI1] return iil1iiIi1I1Ili1l1iI[1][iil1iiIi1I1Ili1l1iI[2]] end, __newindex = function(Ii1Illl1iIiIlilIl11, lIli1I1IlilIII1I11iI1, lIl11iiii1IllIii1iIiI) local iil1iiIi1I1Ili1l1iI = Il1i1llI1lliiiIIl1i[lIli1I1IlilIII1I11iI1] iil1iiIi1I1Ili1l1iI[1][iil1iiIi1I1Ili1l1iI[2]] = lIl11iiii1IllIii1iIiI end }) for lIil1III1l1i1i11l1I = 1, liiliIl1IiIi1Il1li1[lIlil1lIlI1iiiiii1llI] do local ll1ilIiilIlII1illl1 = lIlIIi1i11IiIlIlill[ill11liI1iIil1Ilil1] if ll1ilIiilIlII1illl1[lIliIli1Ill1l1l1ilIll] == iliIi1IIliI1IIi1llI then Il1i1llI1lliiiIIl1i[lIil1III1l1i1i11l1I - 1] = { lIll111Iii1i1iI11Ii11, ll1ilIiilIlII1illl1[lIi1lIllliiIiiIIIIi] } elseif ll1ilIiilIlII1illl1[lIliIli1Ill1l1l1ilIll] == IlI1IiiIIIIIll1iiIi then Il1i1llI1lliiiIIl1i[lIil1III1l1i1i11l1I - 1] = { lIll1l1Iiliilli1ill1i, ll1ilIiilIlII1illl1[lIi1lIllliiIiiIIIIi] } end ill11liI1iIil1Ilil1 = ill11liI1iIil1Ilil1 + 1 end if not Iliii11III1IiIl111l[lIll111Iii1i1iI11Ii11] then Iliii11III1IiIl111l[lIll111Iii1i1iI11Ii11] = {Il1i1llI1lliiiIIl1i} else table.insert(Iliii11III1IiIl111l[lIll111Iii1i1iI11Ii11], Il1i1llI1lliiiIIl1i) end end end local Ii1iIil1ili1lilllli = IillI1IliIilIliiIl1(liiliIl1IiIi1Il1li1, lIl1iiIlli11IIl11l1li, lIlll1IlIliIillliIliI) lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = Ii1iIil1ili1lilllli end elseif IIiliI1llliIl11ll1i < 26 then if l1ii1llIIliIl1IIiII == 109 then ill11liI1iIil1Ilil1 = ill11liI1iIil1Ilil1 - 1 lIlIIi1i11IiIlIlill[ill11liI1iIil1Ilil1] = { [109903] = 14, [45812] = (I11I11ilIllili1lIiI - 168) % 256, [3280] = (liIill11lI11lIi1I11 - 168) % 256, [102038] = 0 } else lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = not lIll111Iii1i1iI11Ii11[liIill11lI11lIi1I11] end elseif IIiliI1llliIl11ll1i ~= 27 then lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = lIl1iiIlli11IIl11l1li[lIlIl111iI111lIl1Illi[lii1lI1lIiiiii1iI1I][lII1lil1liIilililll]] else lIll1l1Iiliilli1ill1i[liIill11lI11lIi1I11] = lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] end elseif IIiliI1llliIl11ll1i >= 21 then if IIiliI1llliIl11ll1i ~= 22 then local Ill1iiiliiIliI1Iii1 = lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI + 2] local lIlii1iliiiII1llIi1Il = lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] + Ill1iiiliiIliI1Iii1 lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = lIlii1iliiiII1llIi1Il if Ill1iiiliiIliI1Iii1 > 0 then if lIlii1iliiiII1llIi1Il <= lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI + 1] then ill11liI1iIil1Ilil1 = ill11liI1iIil1Ilil1 + lIliiI1l1IIiIIii1Il11 lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI + 3] = lIlii1iliiiII1llIi1Il end elseif lIlii1iliiiII1llIi1Il >= lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI + 1] then ill11liI1iIil1Ilil1 = ill11liI1iIil1Ilil1 + lIliiI1l1IIiIIii1Il11 lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI + 3] = lIlii1iliiiII1llIi1Il end else lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = #lIll111Iii1i1iI11Ii11[liIill11lI11lIi1I11] end elseif IIiliI1llliIl11ll1i ~= 20 then lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = lIlIl111iI111lIl1Illi[lii1lI1lIiiiii1iI1I][lII1lil1liIilililll] else if liIill11lI11lIi1I11 > 255 then liIill11lI11lIi1I11 = lIlIl111iI111lIl1Illi[liIill11lI11lIi1I11 - 256][lII1lil1liIilililll] else liIill11lI11lIi1I11 = lIll111Iii1i1iI11Ii11[liIill11lI11lIi1I11] end if l1ii1llIIliIl1IIiII > 255 then l1ii1llIIliIl1IIiII = lIlIl111iI111lIl1Illi[l1ii1llIIliIl1IIiII - 256][lII1lil1liIilililll] else l1ii1llIIliIl1IIiII = lIll111Iii1i1iI11Ii11[l1ii1llIIliIl1IIiII] end lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI][liIill11lI11lIi1I11] = l1ii1llIIliIl1IIiII end elseif IIiliI1llliIl11ll1i >= 33 then if IIiliI1llliIl11ll1i < 35 then if IIiliI1llliIl11ll1i ~= 34 then local lliIl1iI1IiiiIlil1i = liIill11lI11lIi1I11 > 0 and liIill11lI11lIi1I11 - 1 or IiilllIlli1II11ii1l - lIll1l1IIiiIii1iIlli1 if lliIl1iI1IiiiIlil1i < 0 then lliIl1iI1IiiiIlil1i = -1 end for lIil1III1l1i1i11l1I = I11I11ilIllili1lIiI, I11I11ilIllili1lIiI + lliIl1iI1IiiiIlil1i do lIll111Iii1i1iI11Ii11[lIil1III1l1i1i11l1I] = i1IillI1i11i1iIliiI[lIll1l1IIiiIii1iIlli1 + (lIil1III1l1i1i11l1I - I11I11ilIllili1lIiI) + 1] end if liIill11lI11lIi1I11 == 0 then IlilIIlli1l1ilIiiIi = I11I11ilIllili1lIiI + lliIl1iI1IiiiIlil1i for lIil1III1l1i1i11l1I = IlilIIlli1l1ilIiiIi + 1, lIliilIllIiIIi111ili1 do lIll111Iii1i1iI11Ii11[lIil1III1l1i1i11l1I] = nil end end else lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = ii1iiIi1IiIII111i11(IllilIlllliililIII1(lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI]), "`for` initial value must be a number") lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI + 1] = ii1iiIi1IiIII111i11(IllilIlllliililIII1(lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI + 1]), "`for` limit value must be a number") lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI + 2] = ii1iiIi1IiIII111i11(IllilIlllliililIII1(lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI + 2]), "`for` step value must be a number") lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] - lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI + 2] ill11liI1iIil1Ilil1 = ill11liI1iIil1Ilil1 + lIliiI1l1IIiIIii1Il11 end elseif IIiliI1llliIl11ll1i < 36 then if l1ii1llIIliIl1IIiII == 126 then ill11liI1iIil1Ilil1 = ill11liI1iIil1Ilil1 - 1 lIlIIi1i11IiIlIlill[ill11liI1iIil1Ilil1] = { [109903] = 33, [45812] = (I11I11ilIllili1lIiI - 163) % 256, [21946] = (liIill11lI11lIi1I11 - 163) % 256, [102038] = 0 } else lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = -lIll111Iii1i1iI11Ii11[liIill11lI11lIi1I11] end elseif IIiliI1llliIl11ll1i ~= 37 then if l1ii1llIIliIl1IIiII == 235 then ill11liI1iIil1Ilil1 = ill11liI1iIil1Ilil1 - 1 lIlIIi1i11IiIlIlill[ill11liI1iIil1Ilil1] = { [109903] = 31, [45812] = (I11I11ilIllili1lIiI - 233) % 256, [3280] = (liIill11lI11lIi1I11 - 233) % 256, [102038] = 0 } else lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = lIll1l1Iiliilli1ill1i[liIill11lI11lIi1I11] end else if liIill11lI11lIi1I11 > 255 then liIill11lI11lIi1I11 = lIlIl111iI111lIl1Illi[liIill11lI11lIi1I11 - 256][lII1lil1liIilililll] else liIill11lI11lIi1I11 = lIll111Iii1i1iI11Ii11[liIill11lI11lIi1I11] end if l1ii1llIIliIl1IIiII > 255 then l1ii1llIIliIl1IIiII = lIlIl111iI111lIl1Illi[l1ii1llIIliIl1IIiII - 256][lII1lil1liIilililll] else l1ii1llIIliIl1IIiII = lIll111Iii1i1iI11Ii11[l1ii1llIIliIl1IIiII] end lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = liIill11lI11lIi1I11 / l1ii1llIIliIl1IIiII end elseif IIiliI1llliIl11ll1i >= 30 then if IIiliI1llliIl11ll1i < 31 then lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = lIll111Iii1i1iI11Ii11[liIill11lI11lIi1I11] elseif IIiliI1llliIl11ll1i ~= 32 then if liIill11lI11lIi1I11 == 163 then ill11liI1iIil1Ilil1 = ill11liI1iIil1Ilil1 - 1 lIlIIi1i11IiIlIlill[ill11liI1iIil1Ilil1] = { [109903] = 35, [45812] = (I11I11ilIllili1lIiI - 145) % 256, [21946] = (l1ii1llIIliIl1IIiII - 145) % 256, [102038] = 0 } else local lIlII1liIiili1illIIil = I11I11ilIllili1lIiI + 2 local i11I1iIl1I1l11ili11 = { lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI](lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI + 1], lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI + 2]) } for lIil1III1l1i1i11l1I = 1, l1ii1llIIliIl1IIiII do lIll111Iii1i1iI11Ii11[lIlII1liIiili1illIIil + lIil1III1l1i1i11l1I] = i11I1iIl1I1l11ili11[lIil1III1l1i1i11l1I] end if lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI + 3] ~= nil then lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI + 2] = lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI + 3] else ill11liI1iIil1Ilil1 = ill11liI1iIil1Ilil1 + 1 end end else liIill11lI11lIi1I11 = lIll111Iii1i1iI11Ii11[liIill11lI11lIi1I11] if l1ii1llIIliIl1IIiII > 255 then l1ii1llIIliIl1IIiII = lIlIl111iI111lIl1Illi[l1ii1llIIliIl1IIiII - 256][lII1lil1liIilililll] else l1ii1llIIliIl1IIiII = lIll111Iii1i1iI11Ii11[l1ii1llIIliIl1IIiII] end lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI + 1] = liIill11lI11lIi1I11 lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = liIill11lI11lIi1I11[l1ii1llIIliIl1IIiII] end elseif IIiliI1llliIl11ll1i == 29 then if liIill11lI11lIi1I11 > 255 then liIill11lI11lIi1I11 = lIlIl111iI111lIl1Illi[liIill11lI11lIi1I11 - 256][lII1lil1liIilililll] else liIill11lI11lIi1I11 = lIll111Iii1i1iI11Ii11[liIill11lI11lIi1I11] end if l1ii1llIIliIl1IIiII > 255 then l1ii1llIIliIl1IIiII = lIlIl111iI111lIl1Illi[l1ii1llIIliIl1IIiII - 256][lII1lil1liIilililll] else l1ii1llIIliIl1IIiII = lIll111Iii1i1iI11Ii11[l1ii1llIIliIl1IIiII] end if liIill11lI11lIi1I11 <= l1ii1llIIliIl1IIiII ~= (I11I11ilIllili1lIiI ~= 0) then ill11liI1iIil1Ilil1 = ill11liI1iIil1Ilil1 + 1 end else if l1ii1llIIliIl1IIiII > 255 then l1ii1llIIliIl1IIiII = lIlIl111iI111lIl1Illi[l1ii1llIIliIl1IIiII - 256][lII1lil1liIilililll] else l1ii1llIIliIl1IIiII = lIll111Iii1i1iI11Ii11[l1ii1llIIliIl1IIiII] end lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = lIll111Iii1i1iI11Ii11[liIill11lI11lIi1I11][l1ii1llIIliIl1IIiII] end elseif IIiliI1llliIl11ll1i >= 9 then if IIiliI1llliIl11ll1i >= 14 then if IIiliI1llliIl11ll1i < 16 then if IIiliI1llliIl11ll1i == 15 then if l1ii1llIIliIl1IIiII == 92 then ill11liI1iIil1Ilil1 = ill11liI1iIil1Ilil1 - 1 lIlIIi1i11IiIlIlill[ill11liI1iIil1Ilil1] = { [109903] = 30, [45812] = (I11I11ilIllili1lIiI - 79) % 256, [21946] = (liIill11lI11lIi1I11 - 79) % 256, [102038] = 0 } else local lIliIlIIlIilI11i1lIil = {} for lI1I1Ii1iII111IliIl, Il1i1llI1lliiiIIl1i in pairs(Iliii11III1IiIl111l[lIll111Iii1i1iI11Ii11]) do for lI1I1Ii1iII111IliIl, iil1iiIi1I1Ili1l1iI in pairs(Il1i1llI1lliiiIIl1i) do if iil1iiIi1I1Ili1l1iI[1] == lIll111Iii1i1iI11Ii11 and I11I11ilIllili1lIiI <= iil1iiIi1I1Ili1l1iI[2] then local lliliIlI1111iillIii = iil1iiIi1I1Ili1l1iI[2] if not lIliIlIIlIilI11i1lIil[lliliIlI1111iillIii] then table.insert(iIll1llIlI1iIi1lIi1, lIll111Iii1i1iI11Ii11[lliliIlI1111iillIii]) lIliIlIIlIilI11i1lIil[lliliIlI1111iillIii] = #iIll1llIlI1iIi1lIi1 end iil1iiIi1I1Ili1l1iI[1] = iIll1llIlI1iIi1lIi1 iil1iiIi1I1Ili1l1iI[2] = lIliIlIIlIilI11i1lIil[lliliIlI1111iillIii] end end end end elseif liIill11lI11lIi1I11 == 209 then ill11liI1iIil1Ilil1 = ill11liI1iIil1Ilil1 - 1 lIlIIi1i11IiIlIlill[ill11liI1iIil1Ilil1] = { [109903] = 0, [45812] = (I11I11ilIllili1lIiI - 105) % 256, [21946] = (l1ii1llIIliIl1IIiII - 105) % 256, [102038] = 0 } elseif liIill11lI11lIi1I11 == 215 then ill11liI1iIil1Ilil1 = ill11liI1iIil1Ilil1 - 1 lIlIIi1i11IiIlIlill[ill11liI1iIil1Ilil1] = { [109903] = 11, [45812] = (I11I11ilIllili1lIiI - 21) % 256, [21946] = (l1ii1llIIliIl1IIiII - 21) % 256, [102038] = 0 } elseif not not lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] == (l1ii1llIIliIl1IIiII == 0) then ill11liI1iIil1Ilil1 = ill11liI1iIil1Ilil1 + 1 end elseif IIiliI1llliIl11ll1i < 17 then if not not lIll111Iii1i1iI11Ii11[liIill11lI11lIi1I11] == (l1ii1llIIliIl1IIiII == 0) then ill11liI1iIil1Ilil1 = ill11liI1iIil1Ilil1 + 1 else lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = lIll111Iii1i1iI11Ii11[liIill11lI11lIi1I11] end elseif IIiliI1llliIl11ll1i ~= 18 then if liIill11lI11lIi1I11 > 255 then liIill11lI11lIi1I11 = lIlIl111iI111lIl1Illi[liIill11lI11lIi1I11 - 256][lII1lil1liIilililll] else liIill11lI11lIi1I11 = lIll111Iii1i1iI11Ii11[liIill11lI11lIi1I11] end if l1ii1llIIliIl1IIiII > 255 then l1ii1llIIliIl1IIiII = lIlIl111iI111lIl1Illi[l1ii1llIIliIl1IIiII - 256][lII1lil1liIilililll] else l1ii1llIIliIl1IIiII = lIll111Iii1i1iI11Ii11[l1ii1llIIliIl1IIiII] end lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = liIill11lI11lIi1I11 - l1ii1llIIliIl1IIiII else lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = liIill11lI11lIi1I11 ~= 0 if l1ii1llIIliIl1IIiII ~= 0 then ill11liI1iIil1Ilil1 = ill11liI1iIil1Ilil1 + 1 end end elseif IIiliI1llliIl11ll1i < 11 then if IIiliI1llliIl11ll1i == 10 then if liIill11lI11lIi1I11 > 255 then liIill11lI11lIi1I11 = lIlIl111iI111lIl1Illi[liIill11lI11lIi1I11 - 256][lII1lil1liIilililll] else liIill11lI11lIi1I11 = lIll111Iii1i1iI11Ii11[liIill11lI11lIi1I11] end if l1ii1llIIliIl1IIiII > 255 then l1ii1llIIliIl1IIiII = lIlIl111iI111lIl1Illi[l1ii1llIIliIl1IIiII - 256][lII1lil1liIilililll] else l1ii1llIIliIl1IIiII = lIll111Iii1i1iI11Ii11[l1ii1llIIliIl1IIiII] end lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = liIill11lI11lIi1I11 ^ l1ii1llIIliIl1IIiII else lIl1iiIlli11IIl11l1li[lIlIl111iI111lIl1Illi[lii1lI1lIiiiii1iI1I][lII1lil1liIilililll]] = lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] end elseif IIiliI1llliIl11ll1i < 12 then Iliii11III1IiIl111l[lIll111Iii1i1iI11Ii11] = nil if liIill11lI11lIi1I11 == 1 then return true end local llIIi1llillII1i1iI1 = I11I11ilIllili1lIiI + liIill11lI11lIi1I11 - 2 if liIill11lI11lIi1I11 == 0 then llIIi1llillII1i1iI1 = IlilIIlli1l1ilIiiIi end return true, I11I11ilIllili1lIiI, llIIi1llillII1i1iI1 elseif IIiliI1llliIl11ll1i == 13 then local i11I1iIl1I1l11ili11 = lIll111Iii1i1iI11Ii11[liIill11lI11lIi1I11] for lIil1III1l1i1i11l1I = liIill11lI11lIi1I11 + 1, l1ii1llIIliIl1IIiII do i11I1iIl1I1l11ili11 = i11I1iIl1I1l11ili11 .. lIll111Iii1i1iI11Ii11[lIil1III1l1i1i11l1I] end lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = i11I1iIl1I1l11ili11 else if liIill11lI11lIi1I11 > 255 then liIill11lI11lIi1I11 = lIlIl111iI111lIl1Illi[liIill11lI11lIi1I11 - 256][lII1lil1liIilililll] else liIill11lI11lIi1I11 = lIll111Iii1i1iI11Ii11[liIill11lI11lIi1I11] end if l1ii1llIIliIl1IIiII > 255 then l1ii1llIIliIl1IIiII = lIlIl111iI111lIl1Illi[l1ii1llIIliIl1IIiII - 256][lII1lil1liIilililll] else l1ii1llIIliIl1IIiII = lIll111Iii1i1iI11Ii11[l1ii1llIIliIl1IIiII] end if liIill11lI11lIi1I11 < l1ii1llIIliIl1IIiII ~= (I11I11ilIllili1lIiI ~= 0) then ill11liI1iIil1Ilil1 = ill11liI1iIil1Ilil1 + 1 end end elseif IIiliI1llliIl11ll1i >= 4 then if IIiliI1llliIl11ll1i < 6 then if IIiliI1llliIl11ll1i ~= 5 then if liIill11lI11lIi1I11 > 255 then liIill11lI11lIi1I11 = lIlIl111iI111lIl1Illi[liIill11lI11lIi1I11 - 256][lII1lil1liIilililll] else liIill11lI11lIi1I11 = lIll111Iii1i1iI11Ii11[liIill11lI11lIi1I11] end if l1ii1llIIliIl1IIiII > 255 then l1ii1llIIliIl1IIiII = lIlIl111iI111lIl1Illi[l1ii1llIIliIl1IIiII - 256][lII1lil1liIilililll] else l1ii1llIIliIl1IIiII = lIll111Iii1i1iI11Ii11[l1ii1llIIliIl1IIiII] end lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = liIill11lI11lIi1I11 % l1ii1llIIliIl1IIiII else if liIill11lI11lIi1I11 > 255 then liIill11lI11lIi1I11 = lIlIl111iI111lIl1Illi[liIill11lI11lIi1I11 - 256][lII1lil1liIilililll] else liIill11lI11lIi1I11 = lIll111Iii1i1iI11Ii11[liIill11lI11lIi1I11] end if l1ii1llIIliIl1IIiII > 255 then l1ii1llIIliIl1IIiII = lIlIl111iI111lIl1Illi[l1ii1llIIliIl1IIiII - 256][lII1lil1liIilililll] else l1ii1llIIliIl1IIiII = lIll111Iii1i1iI11Ii11[l1ii1llIIliIl1IIiII] end if liIill11lI11lIi1I11 == l1ii1llIIliIl1IIiII ~= (I11I11ilIllili1lIiI ~= 0) then ill11liI1iIil1Ilil1 = ill11liI1iIil1Ilil1 + 1 end end elseif IIiliI1llliIl11ll1i >= 7 then if IIiliI1llliIl11ll1i == 8 then lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = { lIllI1I1liiiIlllI111i(I1lIIi1illi1i1II1Il, 1, liIill11lI11lIi1I11 == 0 and 255 or liIill11lI11lIi1I11) } else ill11liI1iIil1Ilil1 = ill11liI1iIil1Ilil1 + lIliiI1l1IIiIIii1Il11 end else Iliii11III1IiIl111l[lIll111Iii1i1iI11Ii11] = nil local llIl1lI11l1Ii1iIiI1, llIIi1llillII1i1iI1 if liIill11lI11lIi1I11 ~= 1 then if liIill11lI11lIi1I11 ~= 0 then llIIi1llillII1i1iI1 = I11I11ilIllili1lIiI + liIill11lI11lIi1I11 - 1 else llIIi1llillII1i1iI1 = IlilIIlli1l1ilIiiIi end llIIi1llillII1i1iI1, llIl1lI11l1Ii1iIiI1 = Ili1iIiili1I1IiII1l(lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI](lIllI1I1liiiIlllI111i(lIll111Iii1i1iI11Ii11, I11I11ilIllili1lIiI + 1, llIIi1llillII1i1iI1))) else llIIi1llillII1i1iI1, llIl1lI11l1Ii1iIiI1 = Ili1iIiili1I1IiII1l(lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI]()) end lIll111Iii1i1iI11Ii11 = llIl1lI11l1Ii1iIiI1 return true, 1, llIIi1llillII1i1iI1 end elseif IIiliI1llliIl11ll1i < 2 then if IIiliI1llliIl11ll1i == 1 then if liIill11lI11lIi1I11 > 255 then liIill11lI11lIi1I11 = lIlIl111iI111lIl1Illi[liIill11lI11lIi1I11 - 256][lII1lil1liIilililll] else liIill11lI11lIi1I11 = lIll111Iii1i1iI11Ii11[liIill11lI11lIi1I11] end if l1ii1llIIliIl1IIiII > 255 then l1ii1llIIliIl1IIiII = lIlIl111iI111lIl1Illi[l1ii1llIIliIl1IIiII - 256][lII1lil1liIilililll] else l1ii1llIIliIl1IIiII = lIll111Iii1i1iI11Ii11[l1ii1llIIliIl1IIiII] end lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = liIill11lI11lIi1I11 * l1ii1llIIliIl1IIiII else for lIil1III1l1i1i11l1I = I11I11ilIllili1lIiI, liIill11lI11lIi1I11 do lIll111Iii1i1iI11Ii11[lIil1III1l1i1i11l1I] = nil end end elseif IIiliI1llliIl11ll1i == 3 then if liIill11lI11lIi1I11 > 255 then liIill11lI11lIi1I11 = lIlIl111iI111lIl1Illi[liIill11lI11lIi1I11 - 256][lII1lil1liIilililll] else liIill11lI11lIi1I11 = lIll111Iii1i1iI11Ii11[liIill11lI11lIi1I11] end if l1ii1llIIliIl1IIiII > 255 then l1ii1llIIliIl1IIiII = lIlIl111iI111lIl1Illi[l1ii1llIIliIl1IIiII - 256][lII1lil1liIilililll] else l1ii1llIIliIl1IIiII = lIll111Iii1i1iI11Ii11[l1ii1llIIliIl1IIiII] end lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI] = liIill11lI11lIi1I11 + l1ii1llIIliIl1IIiII else local lIlII1liIiili1illIIil = (l1ii1llIIliIl1IIiII - 1) * 50 if liIill11lI11lIi1I11 == 0 then liIill11lI11lIi1I11 = IlilIIlli1l1ilIiiIi - I11I11ilIllili1lIiI end for lIil1III1l1i1i11l1I = 1, liIill11lI11lIi1I11 do lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI][lIlII1liIiili1illIIil + lIil1III1l1i1i11l1I] = lIll111Iii1i1iI11Ii11[I11I11ilIllili1lIiI + lIil1III1l1i1i11l1I] end end end end local lIllI1II1l111lil1iIlI, iIli1lilllll1ill111, lIll1IiIii1iiI1iiliii, I1Iii1lI1lIiIIiil1i = l1llIlI111111Ill1iI(liIll11l1II1liIIIi1) if lIllI1II1l111lil1iIlI then if lIll1IiIii1iiI1iiliii then return lIllI1I1liiiIlllI111i(lIll111Iii1i1iI11Ii11, lIll1IiIii1iiI1iiliii, I1Iii1lI1lIiIIiil1i) end else l1IliiIili1lIiIIllI("Luraph Script:" .. (iliiiiII11i11iIiIiI[ill11liI1iIil1Ilil1 - 1] or "") .. ": " .. i1liiIlllili111i1ll(iIli1lilllll1ill111), 0) end end l1lIIll1ll1iIll1i11(I1I1iIIIi11llIIiI1l, lIl1iiIlli11IIl11l1li) return I1I1iIIIi11llIIiI1l end local lIliIlIIlIilI11i1lIil = llliiIiI11il1IlilI1() return IillI1IliIilIliiIl1(lIliIlIIlIilI11i1lIil, lIl1iiIlli11IIl11l1li)() end IIlII1ili1l1IIl1iiilIllIll1li111ilIll1ll()) 

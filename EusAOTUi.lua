-- wow congrats
-- idk why i obsufcated even though the developer will never fix the game
-- guess i was just embarresed to expose my terrible scripting skills

-- Eu's AOT Ui v 1.0.0
-- Offical Release
-- View Changelog in "Changes" tab
-- Make Sure to Join The Discord! (in credits tab) 

--IMPORTANT:
-- IF YOU ARE GOING TO SHOWCASE THIS SCRIPT MAKE SURE TO GIVE CREDIT <3



-- This file was generated using Luraph Obfuscator v12.3 by memcorrupt.

local lIl11Iiil11lIiI11iIll = assert local llI11i1iiil1lIli1lI = select local lIlIil111ll1ill1iIiiI = tonumber local ilil1llIl1l11Illiii = unpack local l11lIiI1i11Illi1iiI = pcall local ll1iII1iII11111I1ii = setfenv local iiI1llil1I1illlliiI = setmetatable local lIlI1l1Ii1li1II11i1 = type local lIlil1iIiiiIIIlIIl1l1 = getfenv local ilIlI11IllI11lli1li = tostring local l1I1i11ilIl1IIl11II = error local iiII1I1lIlllllIlI1l = string.sub local I1IiiIII1iIi111IiI1 = string.byte local i1111iiil1ii1lll1Ii = string.char local II1il1ilI1Iii1llIii = string.rep local i1IIiiIIl111iil1iI1 = string.gsub local i1lIlIilIllil1iIIil = string.match local l1iIIiI1l1Iillll1li = I1IiiIII1iIi111IiI1("G", 1) local ll1ii1iilIll11111iI, lIlIl11IIl1i1Iil1iIil = #{2402}, #{ 4187, 855, 6356, 6697, 1349, 3840, 1086, 4555, 3546, 2955, 3476, 2045, 2016, 4637, 6106, 2150, 3917, 3487, 1415, 5295, 1756, 2060, 6062, 2920 } + l1iIIiI1l1Iillll1li + 130976 local iIIIi1IlIIllIIIiiII = {} local lIl1ii1lii1IilililI = 1 local i1I1lII1iI1I1Ii1111, liliiiiill1liliil1l local function lIlI1i1II1IiIlI1I1i1l(lIliIIIIliiIlIlI1IIil, lilil1ii1IIlI1i11II) local lIll1i1II1li11IIiil1l lIliIIIIliiIlIlI1IIil = i1IIiiIIl111iil1iI1(iiII1I1lIlllllIlI1l(lIliIIIIliiIlIlI1IIil, 5), "..", function(l111lliii1ll11iI11l) if I1IiiIII1iIi111IiI1(l111lliii1ll11iI11l, 2) == 72 then lIll1i1II1li11IIiil1l = lIlIil111ll1ill1iIiiI(iiII1I1lIlllllIlI1l(l111lliii1ll11iI11l, 1, 1)) return "" else local lIlIilIIIl1l1iIlIiiIi = i1111iiil1ii1lll1Ii(lIlIil111ll1ill1iIiiI(l111lliii1ll11iI11l, 16)) if lIll1i1II1li11IIiil1l then local lIiI1IiIi1I1I11Illl = II1il1ilI1Iii1llIii(lIlIilIIIl1l1iIlIiiIi, lIll1i1II1li11IIiil1l) lIll1i1II1li11IIiil1l = nil return lIiI1IiIi1I1I11Illl else return lIlIilIIIl1l1iIlIiiIi end end end) local function lIllIIIllIilii1l1i1ii() local i1iil1Ii1i1iilIIiii = I1IiiIII1iIi111IiI1(lIliIIIIliiIlIlI1IIil, lIl1ii1lii1IilililI, lIl1ii1lii1IilililI) lIl1ii1lii1IilililI = lIl1ii1lii1IilililI + 1 return i1iil1Ii1i1iilIIiii end local function III1IlIl1Il111IIiII() local i1iil1Ii1i1iilIIiii, lIlIilIIIl1l1iIlIiiIi, lIiI1IiIi1I1I11Illl, lIll1llIliliIlil1iIi1 = I1IiiIII1iIi111IiI1(lIliIIIIliiIlIlI1IIil, lIl1ii1lii1IilililI, lIl1ii1lii1IilililI + 3) lIl1ii1lii1IilililI = lIl1ii1lii1IilililI + 4 return lIll1llIliliIlil1iIi1 * 16777216 + lIiI1IiIi1I1I11Illl * 65536 + lIlIilIIIl1l1iIlIiiIi * 256 + i1iil1Ii1i1iilIIiii end local function illlIl1iiIilliIlIl1(Iill1lilI1ilIlllIl1, lillilliI1llllIIi1i, iIi1lIliI1iIlilIIIl) if iIi1lIliI1iIlilIIIl then local llIlIlii1illi1lIiil, i1li1iilIilIIIiiilI = 0, 0 for lliIIlill1ii111Il1l = lillilliI1llllIIi1i, iIi1lIliI1iIlilIIIl do llIlIlii1illi1lIiil = llIlIlii1illi1lIiil + 2 ^ i1li1iilIilIIIiiilI * illlIl1iiIilliIlIl1(Iill1lilI1ilIlllIl1, lliIIlill1ii111Il1l) i1li1iilIilIIIiiilI = i1li1iilIilIIIiiilI + 1 end return llIlIlii1illi1lIiil else local ii11li11lIllIiIIll1 = 2 ^ (lillilliI1llllIIi1i - 1) return ii11li11lIllIiIIll1 <= Iill1lilI1ilIlllIl1 % (ii11li11lIllIiIIll1 + ii11li11lIllIiIIll1) and 1 or 0 end end local function lIlIllI1i1II1I1IllI1I() local i1iil1Ii1i1iilIIiii, lIlIilIIIl1l1iIlIiiIi = III1IlIl1Il111IIiII(), III1IlIl1Il111IIiII() if i1iil1Ii1i1iilIIiii == 0 and lIlIilIIIl1l1iIlIiiIi == 0 then return 0 end return (-2 * illlIl1iiIilliIlIl1(lIlIilIIIl1l1iIlIiiIi, 32) + 1) * 2 ^ (illlIl1iiIilliIlIl1(lIlIilIIIl1l1iIlIiiIi, 21, 31) - 1023) * ((illlIl1iiIilliIlIl1(lIlIilIIIl1l1iIlIiiIi, 1, 20) * 4294967296 + i1iil1Ii1i1iilIIiii) / 4503599627370496 + 1) end local ilIi1II1i1lIl1l1IIi = function(i1iil1Ii1i1iilIIiii, lIlIilIIIl1l1iIlIiiIi) local lIl1iI1li1illIiI1ilIi = 1 local lIiI1IiIi1I1I11Illl = 0 while i1iil1Ii1i1iilIIiii > 0 and lIlIilIIIl1l1iIlIiiIi > 0 do local ilillilII1ll11l11II = i1iil1Ii1i1iilIIiii % 2 local iIliIIl1i11llII11II = lIlIilIIIl1l1iIlIiiIi % 2 if ilillilII1ll11l11II ~= iIliIIl1i11llII11II then lIiI1IiIi1I1I11Illl = lIiI1IiIi1I1I11Illl + lIl1iI1li1illIiI1ilIi end i1iil1Ii1i1iilIIiii = (i1iil1Ii1i1iilIIiii - ilillilII1ll11l11II) / 2 lIlIilIIIl1l1iIlIiiIi = (lIlIilIIIl1l1iIlIiiIi - iIliIIl1i11llII11II) / 2 lIl1iI1li1illIiI1ilIi = lIl1iI1li1illIiI1ilIi * 2 end if i1iil1Ii1i1iilIIiii < lIlIilIIIl1l1iIlIiiIi then i1iil1Ii1i1iilIIiii = lIlIilIIIl1l1iIlIiiIi end while i1iil1Ii1i1iilIIiii > 0 do local ilillilII1ll11l11II = i1iil1Ii1i1iilIIiii % 2 if ilillilII1ll11l11II > 0 then lIiI1IiIi1I1I11Illl = lIiI1IiIi1I1I11Illl + lIl1iI1li1illIiI1ilIi end i1iil1Ii1i1iilIIiii = (i1iil1Ii1i1iilIIiii - ilillilII1ll11l11II) / 2 lIl1iI1li1illIiI1ilIi = lIl1iI1li1illIiI1ilIi * 2 end return lIiI1IiIi1I1I11Illl end local function liil1IlIiIiIll1ll1l(l11Ilii1lIil1IiIlli) local li11I1Ii1liiIIiiiiI = { I1IiiIII1iIi111IiI1(lIliIIIIliiIlIlI1IIil, lIl1ii1lii1IilililI, lIl1ii1lii1IilililI + 3) } lIl1ii1lii1IilililI = lIl1ii1lii1IilililI + 4 local i1iil1Ii1i1iilIIiii = ilIi1II1i1lIl1l1IIi(li11I1Ii1liiIIiiiiI[1], liliiiiill1liliil1l) local lIlIilIIIl1l1iIlIiiIi = ilIi1II1i1lIl1l1IIi(li11I1Ii1liiIIiiiiI[2], liliiiiill1liliil1l) local lIiI1IiIi1I1I11Illl = ilIi1II1i1lIl1l1IIi(li11I1Ii1liiIIiiiiI[3], liliiiiill1liliil1l) local lIll1llIliliIlil1iIi1 = ilIi1II1i1lIl1l1IIi(li11I1Ii1liiIIiiiiI[4], liliiiiill1liliil1l) liliiiiill1liliil1l = (245 * liliiiiill1liliil1l + l11Ilii1lIil1IiIlli) % 256 return lIll1llIliliIlil1iIi1 * 16777216 + lIiI1IiIi1I1I11Illl * 65536 + lIlIilIIIl1l1iIlIiiIi * 256 + i1iil1Ii1i1iilIIiii end local function lIl1iIiilllII11lliIIl(I11I1ilIIil1IlIiilI) local ilI11IlI1IililiI11i = III1IlIl1Il111IIiII() local lIllllI1IIilliIiii1ll = "" for lliIIlill1ii111Il1l = 1, ilI11IlI1IililiI11i do lIllllI1IIilliIiii1ll = lIllllI1IIilliIiii1ll .. i1111iiil1ii1lll1Ii(ilIi1II1i1lIl1l1IIi(I1IiiIII1iIi111IiI1(lIliIIIIliiIlIlI1IIil, lIl1ii1lii1IilililI + lliIIlill1ii111Il1l - 1), i1I1lII1iI1I1Ii1111)) i1I1lII1iI1I1Ii1111 = (I11I1ilIIil1IlIiilI * i1I1lII1iI1I1Ii1111 + 205) % 256 end lIl1ii1lii1IilililI = lIl1ii1lii1IilililI + ilI11IlI1IililiI11i return lIllllI1IIilliIiii1ll end i1I1lII1iI1I1Ii1111 = lIllIIIllIilii1l1i1ii() liliiiiill1liliil1l = lIllIIIllIilii1l1i1ii() local function il1l1iliIil1i1llil1() local iililIilllill1lilI1 = { [12727] = {}, [90312] = {}, [15895] = {}, [41840] = {} } III1IlIl1Il111IIiII() iililIilllill1lilI1[94545] = lIllIIIllIilii1l1i1ii() lIllIIIllIilii1l1i1ii() local II1IIIIi1ll1iii1lil = III1IlIl1Il111IIiII() - (#{ 6244, 2330, 4605, 1532, 1140, 1322, 1749, 5335, 197, 3677, 1981, 1700, 1564, 4931, 3107, 6072, 5108, 1929, 289, 6905, 2966, 718, 3887, 5737 } + l1iIIiI1l1Iillll1li + 133677) local lill1liII11lIii11i1 = lIllIIIllIilii1l1i1ii() for lliIIlill1ii111Il1l = ll1ii1iilIll11111iI, II1IIIIi1ll1iii1lil do local IIiIi1lilili1ilI1i1 = {} local lIl1liIl11Ii11i1Iliil = liil1IlIiIiIll1ll1l(lill1liII11lIii11i1) IIiIi1lilili1ilI1i1[51844] = illlIl1iiIilliIlIl1(lIl1liIl11Ii11i1Iliil, #{1716}, #{ 585, 1492, 5346, 6785, 5542, 6435, 1712, 3739, 908 }) IIiIi1lilili1ilI1i1[116619] = illlIl1iiIilliIlIl1(lIl1liIl11Ii11i1Iliil, #{ 6480, 5700, 4634, 1985, 3854, 1509, 5385, 3130, 4585, 2790 }, #{ 215, 1445, 5729, 3273, 1820, 3913, 1705, 1084, 6141, 6293, 1997, 3975, 2305, 1408, 6353, 413, 3989, 6519 }) IIiIi1lilili1ilI1i1[50486] = illlIl1iiIilliIlIl1(lIl1liIl11Ii11i1Iliil, #{ 6958, 1418, 5433, 4884, 2502, 5334, 769, 924, 5343, 497, 3618, 2085, 2085, 5623, 2430, 645, 2411, 6882, 2235 }, #{ 3984, 2116, 2083, 1735, 6401, 2054, 1950, 5272, 3989, 4867, 3025, 2783, 4449, 6199, 1307, 2191, 1108, 4969, 2526, 2596, 6680, 848 } + l1iIIiI1l1Iillll1li + -67) IIiIi1lilili1ilI1i1[13919] = illlIl1iiIilliIlIl1(lIl1liIl11Ii11i1Iliil, #{1401}, #{ 5701, 3784, 4542, 6460, 4732, 5877, 4437, 3935, 1388, 2120, 1302, 4220, 5094, 6254, 3503, 3083, 6739, 6197 }) IIiIi1lilili1ilI1i1[45327] = illlIl1iiIilliIlIl1(lIl1liIl11Ii11i1Iliil, #{ 2415, 5767, 6074, 2117, 5557, 2815, 6285, 6370, 6457, 4114, 6666, 6723, 5314, 665, 6160, 4356, 1518, 5381, 2541, 5036, 6770, 4208 } + l1iIIiI1l1Iillll1li + -66, #{ 2284, 2182, 6447, 1722, 4361, 1477, 4271, 3468, 5797, 19, 4248, 1606, 4098, 583, 5721, 6459, 1607, 2511, 3620, 5937, 3689, 4790 } + l1iIIiI1l1Iillll1li + -61) iililIilllill1lilI1[90312][lliIIlill1ii111Il1l] = IIiIi1lilili1ilI1i1 end iililIilllill1lilI1[46853] = lIllIIIllIilii1l1i1ii() local II1IIIIi1ll1iii1lil = III1IlIl1Il111IIiII() for lliIIlill1ii111Il1l = ll1ii1iilIll11111iI, II1IIIIi1ll1iii1lil do iililIilllill1lilI1[12727][lliIIlill1ii111Il1l] = III1IlIl1Il111IIiII() end lIllIIIllIilii1l1i1ii() III1IlIl1Il111IIiII() local II1IIIIi1ll1iii1lil = III1IlIl1Il111IIiII() for lliIIlill1ii111Il1l = ll1ii1iilIll11111iI, II1IIIIi1ll1iii1lil do iililIilllill1lilI1[41840][lliIIlill1ii111Il1l - ll1ii1iilIll11111iI] = il1l1iliIil1i1llil1() end lIllIIIllIilii1l1i1ii() III1IlIl1Il111IIiII() lIllIIIllIilii1l1i1ii() III1IlIl1Il111IIiII() iililIilllill1lilI1[16415] = lIllIIIllIilii1l1i1ii() local II1IIIIi1ll1iii1lil = III1IlIl1Il111IIiII() - (#{ 5689, 5708, 3152, 2815, 988, 3832, 4126, 6887, 4731, 3816, 139, 6074, 2650, 3319, 5248, 3228, 2671, 4036, 2231, 2739, 2378, 2735, 2400 } + l1iIIiI1l1Iillll1li + 133618) local llIiilliIIl1I1iliI1 = lIllIIIllIilii1l1i1ii() for lliIIlill1ii111Il1l = ll1ii1iilIll11111iI, II1IIIIi1ll1iii1lil do local l1ll1iIiIl1illliiiI = {} local lIlI1l1Ii1li1II11i1 = lIllIIIllIilii1l1i1ii() if lIlI1l1Ii1li1II11i1 == #{ 2533, 1551, 3952, 1451, 2117, 5474, 3920, 2456, 5215, 5214, 4087, 2717, 307, 6659, 670, 863, 6599, 3230, 3093, 2533, 4267, 4574, 1510 } + l1iIIiI1l1Iillll1li + 153 then l1ll1iIiIl1illliiiI[95161] = lIlIllI1i1II1I1IllI1I() + lIlIllI1i1II1I1IllI1I() end if lIlI1l1Ii1li1II11i1 == #{ 3746, 1523, 1922, 6182, 6359, 1018, 6379, 1139, 2165, 333, 3252, 4098, 5816, 2664, 2665, 5143, 6414, 3159, 360 } then l1ll1iIiIl1illliiiI[95161] = #{ 2576, 41, 2174, 5090, 1284, 823, 1611, 152, 5357, 4885, 885, 6205, 1261, 6863, 2061, 416, 2379, 3817, 1113, 92, 6084 } + l1iIIiI1l1Iillll1li + 5293 == #{ 2576, 41, 2174, 5090, 1284, 823, 1611, 152, 5357, 4885, 885, 6205, 1261, 6863, 2061, 416, 2379, 3817, 1113, 92, 6084 } + l1iIIiI1l1Iillll1li + 5293 end if lIlI1l1Ii1li1II11i1 == #{ 3951, 6691, 6498, 167, 91, 2998, 3464, 2538, 1105, 5276, 1366, 3287, 5461, 5024, 3023, 3684, 6067, 6437, 4881, 2869, 4988 } + l1iIIiI1l1Iillll1li + 162 then l1ll1iIiIl1illliiiI[95161] = lIl1iIiilllII11lliIIl(llIiilliIIl1I1iliI1) end if lIlI1l1Ii1li1II11i1 == #{ 5082, 6822, 2999, 3911, 4427, 2034, 3942, 3114, 1470, 1957, 3880, 2284, 3660, 3199, 3199, 4949, 5460, 1614, 66, 339, 322, 322, 6438, 1359 } + l1iIIiI1l1Iillll1li + 137 then l1ll1iIiIl1illliiiI[95161] = #{ 5009, 3018, 6099, 4079, 5684, 5087, 1425, 6102, 986, 3750, 2266, 1574, 2539, 2148, 607, 6626, 304, 839, 28, 3602, 3994, 3046, 3771, 936 } + l1iIIiI1l1Iillll1li + 90372 == #{ 398, 2986, 865, 2549, 415, 6704, 4784, 1417, 3818, 470, 3366, 6439, 2066, 1993, 18, 2000, 1941, 5843, 4488, 1126, 649, 5380, 430, 4401 } + l1iIIiI1l1Iillll1li + 88923 end if lIlI1l1Ii1li1II11i1 == #{ 6836, 6187, 3314, 5490, 6825, 5987, 6692, 3831, 6894, 5795, 4536, 6457, 1738, 3070, 953, 712, 3110, 1230, 3854, 1524, 2936 } + l1iIIiI1l1Iillll1li + 116 then l1ll1iIiIl1illliiiI[95161] = lIl1iIiilllII11lliIIl(llIiilliIIl1I1iliI1) end if lIlI1l1Ii1li1II11i1 == #{ 4293, 1078, 3278, 5176, 962, 5089, 3038, 2463, 832, 6676, 2054, 5867, 6462, 4446, 6276, 1023, 397, 2287, 3650, 5292, 1734, 4790 } + l1iIIiI1l1Iillll1li + 57 then l1ll1iIiIl1illliiiI[95161] = lIlIllI1i1II1I1IllI1I() end if lIlI1l1Ii1li1II11i1 == #{ 6571, 882, 4192, 4792, 6491, 4533, 3807, 2296, 1026, 469, 759, 6864, 4347, 3163, 6896, 1544, 1827, 888, 1421, 5845, 3875, 2395, 3011, 4457 } + l1iIIiI1l1Iillll1li + 72 then l1ll1iIiIl1illliiiI[95161] = lIl1iIiilllII11lliIIl(#{ 3759, 4806, 2212, 5778, 2774, 2113, 1255, 4259, 6229, 4590, 2725, 5672, 2036, 5071, 6765, 6481, 5756, 38, 2716, 1861, 799, 1974, 452 } + l1iIIiI1l1Iillll1li + 26) end if lIlI1l1Ii1li1II11i1 == #{ 1647, 1416, 4446, 1538, 4537, 5122, 6567, 5982, 1128, 938, 1686, 643, 3334, 1922, 4100, 493, 4708, 6300, 5003, 655 } + l1iIIiI1l1Iillll1li + 112 then l1ll1iIiIl1illliiiI[95161] = III1IlIl1Il111IIiII() end if lIlI1l1Ii1li1II11i1 == #{ 4081, 5808, 4030, 6826, 5628, 6636, 6298, 120, 5786, 4069, 4592, 1874, 4090, 6296, 1273, 963, 336, 6900, 5666, 6171, 5560, 2399 } + l1iIIiI1l1Iillll1li + -70 then l1ll1iIiIl1illliiiI[95161] = III1IlIl1Il111IIiII() end iililIilllill1lilI1[15895][lliIIlill1ii111Il1l - ll1ii1iilIll11111iI] = l1ll1iIiIl1illliiiI end III1IlIl1Il111IIiII() lIllIIIllIilii1l1i1ii() return iililIilllill1lilI1 end local function il1ll1l1i1ii1l1l1lI(iililIilllill1lilI1, lilil1ii1IIlI1i11II, lIllllI1Iil11liiilIl1) local lI1IIliilil1I1li1li, lIIi1I11lllIi1l11iI = 15, 36 local illi1iI11iI1liIIilI = iililIilllill1lilI1[90312] local I1l1ill1IilIlliiIi1 = iiI1llil1I1illlliiI({}, { __index = function(lIliiIIIII111iII111lI, ilII1liIIilIiilIIiI) local lIllllI1IIilliIiii1ll = iililIilllill1lilI1[15895][ilII1liIIilIiilIIiI] if iiII1I1lIlllllIlI1l(lIlI1l1Ii1li1II11i1(lIllllI1IIilliIiii1ll[95161]), 1, 1) == "s" then return { [95161] = iiII1I1lIlllllIlI1l(lIllllI1IIilliIiii1ll[95161], 4) } end return lIllllI1IIilliIiii1ll end }) local ililIIIillIIIl1i1iI = 16415 local lIlliiII1i1iiI1l11i1I = iililIilllill1lilI1[41840] local lIllIlIi1ii1ll1lIIIIl = 95161 local IiIl1liIilIIiiiI1i1 = iililIilllill1lilI1[46853] local ilIIiIlili11I1illiI = iililIilllill1lilI1[94545] local il1liIilIlIIilli1i1 = 45327 local lIlI1IIlliiiii1lliIIi = iililIilllill1lilI1[12727] local IIl1Iililii1i1liIii = 51844 local function IlllIil1l1l1i1I1IIl(...) local llIIIliilllIiI111iI = 0 local IIiIlI1Ii1iIIiI11il = { ilil1llIl1l11Illiii({}, 1, ilIIiIlili11I1illiI) } local lIlll1llI1i11IIl1i11i = 1 local liII11ll1i1iIi1IIli = {} local liililI1l1Il111lI1I = {} local lilil1ii1IIlI1i11II = lIlil1iIiiiIIIlIIl1l1() local l11i1IiI11ili1Iliii = { ... } local IlIll1Il1Ii1llIiIiI = #l11i1IiI11ili1Iliii - 1 for lliIIlill1ii111Il1l = 0, IlIll1Il1Ii1llIiIiI do if lliIIlill1ii111Il1l < IiIl1liIilIIiiiI1i1 then IIiIlI1Ii1iIIiI11il[lliIIlill1ii111Il1l] = l11i1IiI11ili1Iliii[lliIIlill1ii111Il1l + 1] end end local function l1iil1l1iIIlI11l1Ii(...) local lIiI1IiIi1I1I11Illl = llI11i1iiil1lIli1lI("#", ...) local lIliiIIIII111iII111lI = { ... } return lIiI1IiIi1I1I11Illl, lIliiIIIII111iII111lI end local function i11ilII1Illi1I1iI1i() while true do local lIlii11IlIII1llI11liI = illi1iI11iI1liIIilI[lIlll1llI1i11IIl1i11i] local lIllliil1llllIllI1lI1 = lIlii11IlIII1llI11liI[45327] lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i + 1 local lilll1iIIIIIi1l1111 = lIlii11IlIII1llI11liI[50486] local iIIIiIi1Iillli1il1I = lIlii11IlIII1llI11liI[13919] - lIlIl11IIl1i1Iil1iIil local il1Ii1ll1iI1ll11i1l = lIlii11IlIII1llI11liI[51844] local lIlI1lIiiiliIl11lliii = lIlii11IlIII1llI11liI[13919] local i1iiiIi1lIlIIilliIi = lIlii11IlIII1llI11liI[116619] if lIllliil1llllIllI1lI1 >= 18 then if lIllliil1llllIllI1lI1 >= 27 then if lIllliil1llllIllI1lI1 >= 32 then if lIllliil1llllIllI1lI1 < 34 then if lIllliil1llllIllI1lI1 ~= 33 then lilil1ii1IIlI1i11II[I1l1ill1IilIlliiIi1[lIlI1lIiiiliIl11lliii][lIllIlIi1ii1ll1lIIIIl]] = IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] else IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = { ilil1llIl1l11Illiii(iIIIi1IlIIllIIIiiII, 1, il1Ii1ll1iI1ll11i1l == 0 and 255 or il1Ii1ll1iI1ll11i1l) } end elseif lIllliil1llllIllI1lI1 >= 35 then if lIllliil1llllIllI1lI1 == 36 then if i1iiiIi1lIlIIilliIi == 101 then lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i - 1 illi1iI11iI1liIIilI[lIlll1llI1i11IIl1i11i] = { [45327] = 18, [50486] = (lilll1iIIIIIi1l1111 - 38) % 256, [116619] = (il1Ii1ll1iI1ll11i1l - 38) % 256, [13919] = 0 } else IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = lIllllI1Iil11liiilIl1[il1Ii1ll1iI1ll11i1l] end else il1Ii1ll1iI1ll11i1l = IIiIlI1Ii1iIIiI11il[il1Ii1ll1iI1ll11i1l] if i1iiiIi1lIlIIilliIi > 255 then i1iiiIi1lIlIIilliIi = I1l1ill1IilIlliiIi1[i1iiiIi1lIlIIilliIi - 256][lIllIlIi1ii1ll1lIIIIl] else i1iiiIi1lIlIIilliIi = IIiIlI1Ii1iIIiI11il[i1iiiIi1lIlIIilliIi] end IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111 + 1] = il1Ii1ll1iI1ll11i1l IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = il1Ii1ll1iI1ll11i1l[i1iiiIi1lIlIIilliIi] end elseif i1iiiIi1lIlIIilliIi == 178 then lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i - 1 illi1iI11iI1liIIilI[lIlll1llI1i11IIl1i11i] = { [45327] = 29, [50486] = (lilll1iIIIIIi1l1111 - 108) % 256, [51844] = (il1Ii1ll1iI1ll11i1l - 108) % 256, [13919] = 0 } else IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = #IIiIlI1Ii1iIIiI11il[il1Ii1ll1iI1ll11i1l] end elseif lIllliil1llllIllI1lI1 < 29 then if lIllliil1llllIllI1lI1 ~= 28 then IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = lIl11Iiil11lIiI11iIll(lIlIil111ll1ill1iIiiI(IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111]), "`for` initial value must be a number") IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111 + 1] = lIl11Iiil11lIiI11iIll(lIlIil111ll1ill1iIiiI(IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111 + 1]), "`for` limit value must be a number") IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111 + 2] = lIl11Iiil11lIiI11iIll(lIlIil111ll1ill1iIiiI(IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111 + 2]), "`for` step value must be a number") IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] - IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111 + 2] lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i + iIIIiIi1Iillli1il1I else local I11IiIIllIIi1lII11i = lilll1iIIIIIi1l1111 + 2 local iiIi1l1iI1II1IlIlll = { IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111](IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111 + 1], IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111 + 2]) } for lliIIlill1ii111Il1l = 1, i1iiiIi1lIlIIilliIi do IIiIlI1Ii1iIIiI11il[I11IiIIllIIi1lII11i + lliIIlill1ii111Il1l] = iiIi1l1iI1II1IlIlll[lliIIlill1ii111Il1l] end if IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111 + 3] ~= nil then IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111 + 2] = IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111 + 3] else lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i + 1 end end elseif lIllliil1llllIllI1lI1 >= 30 then if lIllliil1llllIllI1lI1 == 31 then if il1Ii1ll1iI1ll11i1l > 255 then il1Ii1ll1iI1ll11i1l = I1l1ill1IilIlliiIi1[il1Ii1ll1iI1ll11i1l - 256][lIllIlIi1ii1ll1lIIIIl] else il1Ii1ll1iI1ll11i1l = IIiIlI1Ii1iIIiI11il[il1Ii1ll1iI1ll11i1l] end if i1iiiIi1lIlIIilliIi > 255 then i1iiiIi1lIlIIilliIi = I1l1ill1IilIlliiIi1[i1iiiIi1lIlIIilliIi - 256][lIllIlIi1ii1ll1lIIIIl] else i1iiiIi1lIlIIilliIi = IIiIlI1Ii1iIIiI11il[i1iiiIi1lIlIIilliIi] end IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = il1Ii1ll1iI1ll11i1l / i1iiiIi1lIlIIilliIi else if il1Ii1ll1iI1ll11i1l > 255 then il1Ii1ll1iI1ll11i1l = I1l1ill1IilIlliiIi1[il1Ii1ll1iI1ll11i1l - 256][lIllIlIi1ii1ll1lIIIIl] else il1Ii1ll1iI1ll11i1l = IIiIlI1Ii1iIIiI11il[il1Ii1ll1iI1ll11i1l] end if i1iiiIi1lIlIIilliIi > 255 then i1iiiIi1lIlIIilliIi = I1l1ill1IilIlliiIi1[i1iiiIi1lIlIIilliIi - 256][lIllIlIi1ii1ll1lIIIIl] else i1iiiIi1lIlIIilliIi = IIiIlI1Ii1iIIiI11il[i1iiiIi1lIlIIilliIi] end if il1Ii1ll1iI1ll11i1l < i1iiiIi1lIlIIilliIi ~= (lilll1iIIIIIi1l1111 ~= 0) then lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i + 1 end end else local l11iIIlllIllI111lIl = il1Ii1ll1iI1ll11i1l > 0 and il1Ii1ll1iI1ll11i1l - 1 or IlIll1Il1Ii1llIiIiI - IiIl1liIilIIiiiI1i1 if l11iIIlllIllI111lIl < 0 then l11iIIlllIllI111lIl = -1 end for lliIIlill1ii111Il1l = lilll1iIIIIIi1l1111, lilll1iIIIIIi1l1111 + l11iIIlllIllI111lIl do IIiIlI1Ii1iIIiI11il[lliIIlill1ii111Il1l] = l11i1IiI11ili1Iliii[IiIl1liIilIIiiiI1i1 + (lliIIlill1ii111Il1l - lilll1iIIIIIi1l1111) + 1] end if il1Ii1ll1iI1ll11i1l == 0 then llIIIliilllIiI111iI = lilll1iIIIIIi1l1111 + l11iIIlllIllI111lIl for lliIIlill1ii111Il1l = llIIIliilllIiI111iI + 1, ilIIiIlili11I1illiI do IIiIlI1Ii1iIIiI11il[lliIIlill1ii111Il1l] = nil end end end elseif lIllliil1llllIllI1lI1 < 22 then if lIllliil1llllIllI1lI1 < 20 then if lIllliil1llllIllI1lI1 == 19 then IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = I1l1ill1IilIlliiIi1[lIlI1lIiiiliIl11lliii][lIllIlIi1ii1ll1lIIIIl] elseif il1Ii1ll1iI1ll11i1l == 96 then lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i - 1 illi1iI11iI1liIIilI[lIlll1llI1i11IIl1i11i] = { [45327] = 15, [50486] = (lilll1iIIIIIi1l1111 - 38) % 256, [51844] = (i1iiiIi1lIlIIilliIi - 38) % 256, [13919] = 0 } elseif not not IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] == (i1iiiIi1lIlIIilliIi == 0) then lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i + 1 end elseif lIllliil1llllIllI1lI1 ~= 21 then if i1iiiIi1lIlIIilliIi == 200 then lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i - 1 illi1iI11iI1liIIilI[lIlll1llI1i11IIl1i11i] = { [45327] = 13, [50486] = (lilll1iIIIIIi1l1111 - 148) % 256, [51844] = (il1Ii1ll1iI1ll11i1l - 148) % 256, [13919] = 0 } elseif i1iiiIi1lIlIIilliIi == 190 then lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i - 1 illi1iI11iI1liIIilI[lIlll1llI1i11IIl1i11i] = { [45327] = 6, [50486] = (lilll1iIIIIIi1l1111 - 71) % 256, [51844] = (il1Ii1ll1iI1ll11i1l - 71) % 256, [13919] = 0 } else liII11ll1i1iIi1IIli[IIiIlI1Ii1iIIiI11il] = nil if il1Ii1ll1iI1ll11i1l == 1 then return true end local iIliiIliilIiililii1 = lilll1iIIIIIi1l1111 + il1Ii1ll1iI1ll11i1l - 2 if il1Ii1ll1iI1ll11i1l == 0 then iIliiIliilIiililii1 = llIIIliilllIiI111iI end return true, lilll1iIIIIIi1l1111, iIliiIliilIiililii1 end else local illI1I1lI1lIl1ii1il, iIliiIliilIiililii1, i11ilII1Illi1I1iI1i if il1Ii1ll1iI1ll11i1l ~= 1 then if il1Ii1ll1iI1ll11i1l ~= 0 then iIliiIliilIiililii1 = lilll1iIIIIIi1l1111 + il1Ii1ll1iI1ll11i1l - 1 else iIliiIliilIiililii1 = llIIIliilllIiI111iI end iIliiIliilIiililii1, illI1I1lI1lIl1ii1il = l1iil1l1iIIlI11l1Ii(IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111](ilil1llIl1l11Illiii(IIiIlI1Ii1iIIiI11il, lilll1iIIIIIi1l1111 + 1, iIliiIliilIiililii1))) else iIliiIliilIiililii1, illI1I1lI1lIl1ii1il = l1iil1l1iIIlI11l1Ii(IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111]()) end if i1iiiIi1lIlIIilliIi ~= 1 then if i1iiiIi1lIlIIilliIi ~= 0 then iIliiIliilIiililii1 = lilll1iIIIIIi1l1111 + i1iiiIi1lIlIIilliIi - 2 llIIIliilllIiI111iI = iIliiIliilIiililii1 + 1 else iIliiIliilIiililii1 = iIliiIliilIiililii1 + lilll1iIIIIIi1l1111 - 1 llIIIliilllIiI111iI = iIliiIliilIiililii1 end i11ilII1Illi1I1iI1i = 0 for lliIIlill1ii111Il1l = lilll1iIIIIIi1l1111, iIliiIliilIiililii1 do i11ilII1Illi1I1iI1i = i11ilII1Illi1I1iI1i + 1 IIiIlI1Ii1iIIiI11il[lliIIlill1ii111Il1l] = illI1I1lI1lIl1ii1il[i11ilII1Illi1I1iI1i] end else llIIIliilllIiI111iI = lilll1iIIIIIi1l1111 - 1 end for lliIIlill1ii111Il1l = llIIIliilllIiI111iI + 1, ilIIiIlili11I1illiI do IIiIlI1Ii1iIIiI11il[lliIIlill1ii111Il1l] = nil end end elseif lIllliil1llllIllI1lI1 < 24 then if lIllliil1llllIllI1lI1 ~= 23 then if il1Ii1ll1iI1ll11i1l > 255 then il1Ii1ll1iI1ll11i1l = I1l1ill1IilIlliiIi1[il1Ii1ll1iI1ll11i1l - 256][lIllIlIi1ii1ll1lIIIIl] else il1Ii1ll1iI1ll11i1l = IIiIlI1Ii1iIIiI11il[il1Ii1ll1iI1ll11i1l] end if i1iiiIi1lIlIIilliIi > 255 then i1iiiIi1lIlIIilliIi = I1l1ill1IilIlliiIi1[i1iiiIi1lIlIIilliIi - 256][lIllIlIi1ii1ll1lIIIIl] else i1iiiIi1lIlIIilliIi = IIiIlI1Ii1iIIiI11il[i1iiiIi1lIlIIilliIi] end IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111][il1Ii1ll1iI1ll11i1l] = i1iiiIi1lIlIIilliIi else liII11ll1i1iIi1IIli[IIiIlI1Ii1iIIiI11il] = nil local illI1I1lI1lIl1ii1il, iIliiIliilIiililii1 if il1Ii1ll1iI1ll11i1l ~= 1 then if il1Ii1ll1iI1ll11i1l ~= 0 then iIliiIliilIiililii1 = lilll1iIIIIIi1l1111 + il1Ii1ll1iI1ll11i1l - 1 else iIliiIliilIiililii1 = llIIIliilllIiI111iI end iIliiIliilIiililii1, illI1I1lI1lIl1ii1il = l1iil1l1iIIlI11l1Ii(IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111](ilil1llIl1l11Illiii(IIiIlI1Ii1iIIiI11il, lilll1iIIIIIi1l1111 + 1, iIliiIliilIiililii1))) else iIliiIliilIiililii1, illI1I1lI1lIl1ii1il = l1iil1l1iIIlI11l1Ii(IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111]()) end IIiIlI1Ii1iIIiI11il = illI1I1lI1lIl1ii1il return true, 1, iIliiIliilIiililii1 end elseif lIllliil1llllIllI1lI1 >= 25 then if lIllliil1llllIllI1lI1 == 26 then if il1Ii1ll1iI1ll11i1l > 255 then il1Ii1ll1iI1ll11i1l = I1l1ill1IilIlliiIi1[il1Ii1ll1iI1ll11i1l - 256][lIllIlIi1ii1ll1lIIIIl] else il1Ii1ll1iI1ll11i1l = IIiIlI1Ii1iIIiI11il[il1Ii1ll1iI1ll11i1l] end if i1iiiIi1lIlIIilliIi > 255 then i1iiiIi1lIlIIilliIi = I1l1ill1IilIlliiIi1[i1iiiIi1lIlIIilliIi - 256][lIllIlIi1ii1ll1lIIIIl] else i1iiiIi1lIlIIilliIi = IIiIlI1Ii1iIIiI11il[i1iiiIi1lIlIIilliIi] end IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = il1Ii1ll1iI1ll11i1l + i1iiiIi1lIlIIilliIi else if il1Ii1ll1iI1ll11i1l > 255 then il1Ii1ll1iI1ll11i1l = I1l1ill1IilIlliiIi1[il1Ii1ll1iI1ll11i1l - 256][lIllIlIi1ii1ll1lIIIIl] else il1Ii1ll1iI1ll11i1l = IIiIlI1Ii1iIIiI11il[il1Ii1ll1iI1ll11i1l] end if i1iiiIi1lIlIIilliIi > 255 then i1iiiIi1lIlIIilliIi = I1l1ill1IilIlliiIi1[i1iiiIi1lIlIIilliIi - 256][lIllIlIi1ii1ll1lIIIIl] else i1iiiIi1lIlIIilliIi = IIiIlI1Ii1iIIiI11il[i1iiiIi1lIlIIilliIi] end if il1Ii1ll1iI1ll11i1l <= i1iiiIi1lIlIIilliIi ~= (lilll1iIIIIIi1l1111 ~= 0) then lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i + 1 end end else if il1Ii1ll1iI1ll11i1l > 255 then il1Ii1ll1iI1ll11i1l = I1l1ill1IilIlliiIi1[il1Ii1ll1iI1ll11i1l - 256][lIllIlIi1ii1ll1lIIIIl] else il1Ii1ll1iI1ll11i1l = IIiIlI1Ii1iIIiI11il[il1Ii1ll1iI1ll11i1l] end if i1iiiIi1lIlIIilliIi > 255 then i1iiiIi1lIlIIilliIi = I1l1ill1IilIlliiIi1[i1iiiIi1lIlIIilliIi - 256][lIllIlIi1ii1ll1lIIIIl] else i1iiiIi1lIlIIilliIi = IIiIlI1Ii1iIIiI11il[i1iiiIi1lIlIIilliIi] end IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = il1Ii1ll1iI1ll11i1l % i1iiiIi1lIlIIilliIi end elseif lIllliil1llllIllI1lI1 < 9 then if lIllliil1llllIllI1lI1 >= 4 then if lIllliil1llllIllI1lI1 < 6 then if lIllliil1llllIllI1lI1 ~= 5 then local iiiliIiiIl1II1lIll1 = IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111 + 2] local lIl1ii1lii1IilililI = IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] + iiiliIiiIl1II1lIll1 IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = lIl1ii1lii1IilililI if iiiliIiiIl1II1lIll1 > 0 then if lIl1ii1lii1IilililI <= IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111 + 1] then lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i + iIIIiIi1Iillli1il1I IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111 + 3] = lIl1ii1lii1IilililI end elseif lIl1ii1lii1IilililI >= IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111 + 1] then lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i + iIIIiIi1Iillli1il1I IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111 + 3] = lIl1ii1lii1IilililI end else if il1Ii1ll1iI1ll11i1l > 255 then il1Ii1ll1iI1ll11i1l = I1l1ill1IilIlliiIi1[il1Ii1ll1iI1ll11i1l - 256][lIllIlIi1ii1ll1lIIIIl] else il1Ii1ll1iI1ll11i1l = IIiIlI1Ii1iIIiI11il[il1Ii1ll1iI1ll11i1l] end if i1iiiIi1lIlIIilliIi > 255 then i1iiiIi1lIlIIilliIi = I1l1ill1IilIlliiIi1[i1iiiIi1lIlIIilliIi - 256][lIllIlIi1ii1ll1lIIIIl] else i1iiiIi1lIlIIilliIi = IIiIlI1Ii1iIIiI11il[i1iiiIi1lIlIIilliIi] end IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = il1Ii1ll1iI1ll11i1l * i1iiiIi1lIlIIilliIi end elseif lIllliil1llllIllI1lI1 < 7 then IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = not IIiIlI1Ii1iIIiI11il[il1Ii1ll1iI1ll11i1l] elseif lIllliil1llllIllI1lI1 == 8 then if il1Ii1ll1iI1ll11i1l > 255 then il1Ii1ll1iI1ll11i1l = I1l1ill1IilIlliiIi1[il1Ii1ll1iI1ll11i1l - 256][lIllIlIi1ii1ll1lIIIIl] else il1Ii1ll1iI1ll11i1l = IIiIlI1Ii1iIIiI11il[il1Ii1ll1iI1ll11i1l] end if i1iiiIi1lIlIIilliIi > 255 then i1iiiIi1lIlIIilliIi = I1l1ill1IilIlliiIi1[i1iiiIi1lIlIIilliIi - 256][lIllIlIi1ii1ll1lIIIIl] else i1iiiIi1lIlIIilliIi = IIiIlI1Ii1iIIiI11il[i1iiiIi1lIlIIilliIi] end IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = il1Ii1ll1iI1ll11i1l ^ i1iiiIi1lIlIIilliIi else if il1Ii1ll1iI1ll11i1l > 255 then il1Ii1ll1iI1ll11i1l = I1l1ill1IilIlliiIi1[il1Ii1ll1iI1ll11i1l - 256][lIllIlIi1ii1ll1lIIIIl] else il1Ii1ll1iI1ll11i1l = IIiIlI1Ii1iIIiI11il[il1Ii1ll1iI1ll11i1l] end if i1iiiIi1lIlIIilliIi > 255 then i1iiiIi1lIlIIilliIi = I1l1ill1IilIlliiIi1[i1iiiIi1lIlIIilliIi - 256][lIllIlIi1ii1ll1lIIIIl] else i1iiiIi1lIlIIilliIi = IIiIlI1Ii1iIIiI11il[i1iiiIi1lIlIIilliIi] end IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = il1Ii1ll1iI1ll11i1l - i1iiiIi1lIlIIilliIi end elseif lIllliil1llllIllI1lI1 < 2 then if lIllliil1llllIllI1lI1 ~= 1 then if i1iiiIi1lIlIIilliIi > 255 then i1iiiIi1lIlIIilliIi = I1l1ill1IilIlliiIi1[i1iiiIi1lIlIIilliIi - 256][lIllIlIi1ii1ll1lIIIIl] else i1iiiIi1lIlIIilliIi = IIiIlI1Ii1iIIiI11il[i1iiiIi1lIlIIilliIi] end IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = IIiIlI1Ii1iIIiI11il[il1Ii1ll1iI1ll11i1l][i1iiiIi1lIlIIilliIi] else local iiIi1l1iI1II1IlIlll = IIiIlI1Ii1iIIiI11il[il1Ii1ll1iI1ll11i1l] for lliIIlill1ii111Il1l = il1Ii1ll1iI1ll11i1l + 1, i1iiiIi1lIlIIilliIi do iiIi1l1iI1II1IlIlll = iiIi1l1iI1II1IlIlll .. IIiIlI1Ii1iIIiI11il[lliIIlill1ii111Il1l] end IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = iiIi1l1iI1II1IlIlll end elseif lIllliil1llllIllI1lI1 ~= 3 then IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = lilil1ii1IIlI1i11II[I1l1ill1IilIlliiIi1[lIlI1lIiiiliIl11lliii][lIllIlIi1ii1ll1lIIIIl]] else if il1Ii1ll1iI1ll11i1l > 255 then il1Ii1ll1iI1ll11i1l = I1l1ill1IilIlliiIi1[il1Ii1ll1iI1ll11i1l - 256][lIllIlIi1ii1ll1lIIIIl] else il1Ii1ll1iI1ll11i1l = IIiIlI1Ii1iIIiI11il[il1Ii1ll1iI1ll11i1l] end if i1iiiIi1lIlIIilliIi > 255 then i1iiiIi1lIlIIilliIi = I1l1ill1IilIlliiIi1[i1iiiIi1lIlIIilliIi - 256][lIllIlIi1ii1ll1lIIIIl] else i1iiiIi1lIlIIilliIi = IIiIlI1Ii1iIIiI11il[i1iiiIi1lIlIIilliIi] end if il1Ii1ll1iI1ll11i1l == i1iiiIi1lIlIIilliIi ~= (lilll1iIIIIIi1l1111 ~= 0) then lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i + 1 end end elseif lIllliil1llllIllI1lI1 < 13 then if lIllliil1llllIllI1lI1 < 11 then if lIllliil1llllIllI1lI1 == 10 then local li11I1ilii1IiIlli11 = lIlliiII1i1iiI1l11i1I[lIlI1lIiiiliIl11lliii] local lIliIi1l1IllliIIlliiI = {} if li11I1ilii1IiIlli11[ililIIIillIIIl1i1iI] > 0 then do local I1ll1lii1l1I111i1lI = {} lIliIi1l1IllliIIlliiI = iiI1llil1I1illlliiI({}, { __index = function(lIliiIIIII111iII111lI, ilII1liIIilIiilIIiI) local lIlIlil1lilliI1IiI1II = I1ll1lii1l1I111i1lI[ilII1liIIilIiilIIiI] return lIlIlil1lilliI1IiI1II[1][lIlIlil1lilliI1IiI1II[2]] end, __newindex = function(lIliiIIIII111iII111lI, ilII1liIIilIiilIIiI, lIll111IiilIIli1iilli) local lIlIlil1lilliI1IiI1II = I1ll1lii1l1I111i1lI[ilII1liIIilIiilIIiI] lIlIlil1lilliI1IiI1II[1][lIlIlil1lilliI1IiI1II[2]] = lIll111IiilIIli1iilli end }) for lliIIlill1ii111Il1l = 1, li11I1ilii1IiIlli11[ililIIIillIIIl1i1iI] do local IiliiIiil1IIllIi1il = illi1iI11iI1liIIilI[lIlll1llI1i11IIl1i11i] if IiliiIiil1IIllIi1il[il1liIilIlIIilli1i1] == lI1IIliilil1I1li1li then I1ll1lii1l1I111i1lI[lliIIlill1ii111Il1l - 1] = { IIiIlI1Ii1iIIiI11il, IiliiIiil1IIllIi1il[IIl1Iililii1i1liIii] } elseif IiliiIiil1IIllIi1il[il1liIilIlIIilli1i1] == lIIi1I11lllIi1l11iI then I1ll1lii1l1I111i1lI[lliIIlill1ii111Il1l - 1] = { lIllllI1Iil11liiilIl1, IiliiIiil1IIllIi1il[IIl1Iililii1i1liIii] } end lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i + 1 end if not liII11ll1i1iIi1IIli[IIiIlI1Ii1iIIiI11il] then liII11ll1i1iIi1IIli[IIiIlI1Ii1iIIiI11il] = {I1ll1lii1l1I111i1lI} else table.insert(liII11ll1i1iIi1IIli[IIiIlI1Ii1iIIiI11il], I1ll1lii1l1I111i1lI) end end end local I1lII1lIliIi1Ii1lIi = il1ll1l1i1ii1l1l1lI(li11I1ilii1IiIlli11, lilil1ii1IIlI1i11II, lIliIi1l1IllliIIlliiI) IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = I1lII1lIliIi1Ii1lIi elseif i1iiiIi1lIlIIilliIi == 141 then lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i - 1 illi1iI11iI1liIIilI[lIlll1llI1i11IIl1i11i] = { [45327] = 36, [50486] = (lilll1iIIIIIi1l1111 - 97) % 256, [51844] = (il1Ii1ll1iI1ll11i1l - 97) % 256, [13919] = 0 } elseif i1iiiIi1lIlIIilliIi == 41 then lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i - 1 illi1iI11iI1liIIilI[lIlll1llI1i11IIl1i11i] = { [45327] = 16, [50486] = (lilll1iIIIIIi1l1111 - 47) % 256, [51844] = (il1Ii1ll1iI1ll11i1l - 47) % 256, [13919] = 0 } else IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = -IIiIlI1Ii1iIIiI11il[il1Ii1ll1iI1ll11i1l] end elseif lIllliil1llllIllI1lI1 ~= 12 then if not not IIiIlI1Ii1iIIiI11il[il1Ii1ll1iI1ll11i1l] == (i1iiiIi1lIlIIilliIi == 0) then lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i + 1 else IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = IIiIlI1Ii1iIIiI11il[il1Ii1ll1iI1ll11i1l] end else local I11IiIIllIIi1lII11i = (i1iiiIi1lIlIIilliIi - 1) * 50 if il1Ii1ll1iI1ll11i1l == 0 then il1Ii1ll1iI1ll11i1l = llIIIliilllIiI111iI - lilll1iIIIIIi1l1111 end for lliIIlill1ii111Il1l = 1, il1Ii1ll1iI1ll11i1l do IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111][I11IiIIllIIi1lII11i + lliIIlill1ii111Il1l] = IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111 + lliIIlill1ii111Il1l] end end elseif lIllliil1llllIllI1lI1 < 15 then if lIllliil1llllIllI1lI1 ~= 14 then if i1iiiIi1lIlIIilliIi == 118 then lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i - 1 illi1iI11iI1liIIilI[lIlll1llI1i11IIl1i11i] = { [45327] = 20, [50486] = (lilll1iIIIIIi1l1111 - 98) % 256, [51844] = (il1Ii1ll1iI1ll11i1l - 98) % 256, [13919] = 0 } else for lliIIlill1ii111Il1l = lilll1iIIIIIi1l1111, il1Ii1ll1iI1ll11i1l do IIiIlI1Ii1iIIiI11il[lliIIlill1ii111Il1l] = nil end end else IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = il1Ii1ll1iI1ll11i1l ~= 0 if i1iiiIi1lIlIIilliIi ~= 0 then lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i + 1 end end elseif lIllliil1llllIllI1lI1 >= 16 then if lIllliil1llllIllI1lI1 ~= 17 then local I1iiIiIliI1l1IliiiI = {} for ii1illl1lllI1l11ilI, I1ll1lii1l1I111i1lI in pairs(liII11ll1i1iIi1IIli[IIiIlI1Ii1iIIiI11il]) do for ii1illl1lllI1l11ilI, lIlIlil1lilliI1IiI1II in pairs(I1ll1lii1l1I111i1lI) do if lIlIlil1lilliI1IiI1II[1] == IIiIlI1Ii1iIIiI11il and lilll1iIIIIIi1l1111 <= lIlIlil1lilliI1IiI1II[2] then local IlilI1i1lI1ll11liiI = lIlIlil1lilliI1IiI1II[2] if not I1iiIiIliI1l1IliiiI[IlilI1i1lI1ll11liiI] then table.insert(liililI1l1Il111lI1I, IIiIlI1Ii1iIIiI11il[IlilI1i1lI1ll11liiI]) I1iiIiIliI1l1IliiiI[IlilI1i1lI1ll11liiI] = #liililI1l1Il111lI1I end lIlIlil1lilliI1IiI1II[1] = liililI1l1Il111lI1I lIlIlil1lilliI1IiI1II[2] = I1iiIiIliI1l1IliiiI[IlilI1i1lI1ll11liiI] end end end else lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i + iIIIiIi1Iillli1il1I end elseif i1iiiIi1lIlIIilliIi == 100 then lIlll1llI1i11IIl1i11i = lIlll1llI1i11IIl1i11i - 1 illi1iI11iI1liIIilI[lIlll1llI1i11IIl1i11i] = { [45327] = 28, [50486] = (lilll1iIIIIIi1l1111 - 29) % 256, [116619] = (il1Ii1ll1iI1ll11i1l - 29) % 256, [13919] = 0 } else IIiIlI1Ii1iIIiI11il[lilll1iIIIIIi1l1111] = IIiIlI1Ii1iIIiI11il[il1Ii1ll1iI1ll11i1l] end end end local iiI1liIi11iIlIIi1ll, lIllllI1IIilliIiii1ll, lllIiIi111iI1IilIiI, li1l1lI1IIliIillI1i = l11lIiI1i11Illi1iiI(i11ilII1Illi1I1iI1i) if iiI1liIi11iIlIIi1ll then if lllIiIi111iI1IilIiI then return ilil1llIl1l11Illiii(IIiIlI1Ii1iIIiI11il, lllIiIi111iI1IilIiI, li1l1lI1IIliIillI1i) end else l1I1i11ilIl1IIl11II("Luraph Script:" .. (lIlI1IIlliiiii1lliIIi[lIlll1llI1i11IIl1i11i - 1] or "") .. ": " .. ilIlI11IllI11lli1li(lIllllI1IIilliIiii1ll), 0) end end ll1iII1iII11111I1ii(IlllIil1l1l1i1I1IIl, lilil1ii1IIlI1i11II) return IlllIil1l1l1i1I1IIl end local I1iiIiIliI1l1IliiiI = il1l1iliIil1i1llil1() return il1ll1l1i1ii1l1l1lI(I1iiIiIliI1l1IliiiI, lilil1ii1IIlI1i11II)() end lIlI1i1II1IiIlI1I1i1llIlil1iIiiiIIIlIIl1l1()) 

-- wow congrats
-- idk why i obsufcated even though the developer will never fix the game
-- guess i was just embarresed to expose my terrible scripting skills

-- Eu's AOT Ui v 0.0.2 
-- Request more features on the thread Ill try to make em!


-- This file was generated using Luraph Obfuscator v12.3 by memcorrupt.

local li1llill11I1i11ll11 = assert local iil1iilI1l111lII11i = select local lIl1IiIi1lIiI1lii1ill = tonumber local liI1lI1Illiiiiii1l1 = unpack local Ii1li1llli1lI1i111I = pcall local iII11l1ilii1i1lil1i = setfenv local ll11111lliIilIlIlli = setmetatable local lIli1iiIlilIIi111ll = type local Il11ll111IlIlII111l = getfenv local l1l11IIl11I1I1iiI1l = tostring local lIlIIIl1i11illIiIl1 = error local lIlIlIII11I11l11ili1i = string.sub local lIllliliIlIIliIiIIlI1 = string.byte local lIl1lIi1lIiiiiiIllIIi = string.char local lIlllIi111ll1liIlIIli = string.rep local IiiIilIIi1iiIiiill1 = string.gsub local Ii11liI1illI1iiIlll = string.match local lIl11lIliliil1lII1iIi = lIllliliIlIIliIiIIlI1("[", 1) local Il1llIl1llli1IlIlll, lIll1liIlllIi1I111iiI = #{5029}, #{ 1515, 4581, 2983, 872, 1321, 3538, 1680, 981, 2145, 4369, 3995, 5625, 3138, 2766, 2866, 5816, 6634, 4721, 1979, 586, 2436, 4746, 5220, 1020 } + lIl11lIliliil1lII1iIi + 130956 local iIlll1i1l111i1lIii1 = {} local IIillliI1Ill1i1iI1i = 1 local IIlili11l11i1lIIllI, liiI1iIi1liiliIIlll local function lIlI11liil1iiIl1lIIIl(i1l1llIilil1i11ili1, iIlI1IIliIiIl1iIIii) local iil1ll1l1IIliI1iiIl i1l1llIilil1i11ili1 = IiiIilIIi1iiIiiill1(lIlIlIII11I11l11ili1i(i1l1llIilil1i11ili1, 5), "..", function(Il111111I1IllI1Iil1) if lIllliliIlIIliIiIIlI1(Il111111I1IllI1Iil1, 2) == 72 then iil1ll1l1IIliI1iiIl = lIl1IiIi1lIiI1lii1ill(lIlIlIII11I11l11ili1i(Il111111I1IllI1Iil1, 1, 1)) return "" else local IIiilll1iliiliililI = lIl1lIi1lIiiiiiIllIIi(lIl1IiIi1lIiI1lii1ill(Il111111I1IllI1Iil1, 16)) if iil1ll1l1IIliI1iiIl then local iiII1lillllIil1iIl1 = lIlllIi111ll1liIlIIli(IIiilll1iliiliililI, iil1ll1l1IIliI1iiIl) iil1ll1l1IIliI1iiIl = nil return iiII1lillllIil1iIl1 else return IIiilll1iliiliililI end end end) local function lIl11IIiIIiil1i1Il1Il() local i1I1ii1I1l1lIliiI11 = lIllliliIlIIliIiIIlI1(i1l1llIilil1i11ili1, IIillliI1Ill1i1iI1i, IIillliI1Ill1i1iI1i) IIillliI1Ill1i1iI1i = IIillliI1Ill1i1iI1i + 1 return i1I1ii1I1l1lIliiI11 end local function Iii11liI11IliIIllll() local i1I1ii1I1l1lIliiI11, IIiilll1iliiliililI, iiII1lillllIil1iIl1, li1IIli1ilI1i1IllIl = lIllliliIlIIliIiIIlI1(i1l1llIilil1i11ili1, IIillliI1Ill1i1iI1i, IIillliI1Ill1i1iI1i + 3) IIillliI1Ill1i1iI1i = IIillliI1Ill1i1iI1i + 4 return li1IIli1ilI1i1IllIl * 16777216 + iiII1lillllIil1iIl1 * 65536 + IIiilll1iliiliililI * 256 + i1I1ii1I1l1lIliiI11 end local function IilIIIlI1IlIiIIlili(lIlilil1llii1IiiII1II, IIiIi1lIiIIiI1llII1, lIlii1iI1l1IIliI11lIi) if lIlii1iI1l1IIliI11lIi then local IIlllI11lilIii11lii, llil1iliiili11IlI1i = 0, 0 for i1IiIiIl1l1I11ilIlI = IIiIi1lIiIIiI1llII1, lIlii1iI1l1IIliI11lIi do IIlllI11lilIii11lii = IIlllI11lilIii11lii + 2 ^ llil1iliiili11IlI1i * IilIIIlI1IlIiIIlili(lIlilil1llii1IiiII1II, i1IiIiIl1l1I11ilIlI) llil1iliiili11IlI1i = llil1iliiili11IlI1i + 1 end return IIlllI11lilIii11lii else local IIiI1iil1I1l111111l = 2 ^ (IIiIi1lIiIIiI1llII1 - 1) return IIiI1iil1I1l111111l <= lIlilil1llii1IiiII1II % (IIiI1iil1I1l111111l + IIiI1iil1I1l111111l) and 1 or 0 end end local function lIl1iIlliiiill1Iil1() local i1I1ii1I1l1lIliiI11, IIiilll1iliiliililI = Iii11liI11IliIIllll(), Iii11liI11IliIIllll() if i1I1ii1I1l1lIliiI11 == 0 and IIiilll1iliiliililI == 0 then return 0 end return (-2 * IilIIIlI1IlIiIIlili(IIiilll1iliiliililI, 32) + 1) * 2 ^ (IilIIIlI1IlIiIIlili(IIiilll1iliiliililI, 21, 31) - 1023) * ((IilIIIlI1IlIiIIlili(IIiilll1iliiliililI, 1, 20) * 4294967296 + i1I1ii1I1l1lIliiI11) / 4503599627370496 + 1) end local lIl1lI1liili11iIilIiI = function(i1I1ii1I1l1lIliiI11, IIiilll1iliiliililI) local iiIl1ililll1iiI1III = 1 local iiII1lillllIil1iIl1 = 0 while i1I1ii1I1l1lIliiI11 > 0 and IIiilll1iliiliililI > 0 do local lIlli11I1I1iil11IIl1I = i1I1ii1I1l1lIliiI11 % 2 local lIli1l1lllI11iIl1iIli = IIiilll1iliiliililI % 2 if lIlli11I1I1iil11IIl1I ~= lIli1l1lllI11iIl1iIli then iiII1lillllIil1iIl1 = iiII1lillllIil1iIl1 + iiIl1ililll1iiI1III end i1I1ii1I1l1lIliiI11 = (i1I1ii1I1l1lIliiI11 - lIlli11I1I1iil11IIl1I) / 2 IIiilll1iliiliililI = (IIiilll1iliiliililI - lIli1l1lllI11iIl1iIli) / 2 iiIl1ililll1iiI1III = iiIl1ililll1iiI1III * 2 end if i1I1ii1I1l1lIliiI11 < IIiilll1iliiliililI then i1I1ii1I1l1lIliiI11 = IIiilll1iliiliililI end while i1I1ii1I1l1lIliiI11 > 0 do local lIlli11I1I1iil11IIl1I = i1I1ii1I1l1lIliiI11 % 2 if lIlli11I1I1iil11IIl1I > 0 then iiII1lillllIil1iIl1 = iiII1lillllIil1iIl1 + iiIl1ililll1iiI1III end i1I1ii1I1l1lIliiI11 = (i1I1ii1I1l1lIliiI11 - lIlli11I1I1iil11IIl1I) / 2 iiIl1ililll1iiI1III = iiIl1ililll1iiI1III * 2 end return iiII1lillllIil1iIl1 end local function l1l11l11I1IiiIil1II(llll1I1IlIIIi1I1llI) local iIli1Iiii1IlIIi1IIi = { lIllliliIlIIliIiIIlI1(i1l1llIilil1i11ili1, IIillliI1Ill1i1iI1i, IIillliI1Ill1i1iI1i + 3) } IIillliI1Ill1i1iI1i = IIillliI1Ill1i1iI1i + 4 local i1I1ii1I1l1lIliiI11 = lIl1lI1liili11iIilIiI(iIli1Iiii1IlIIi1IIi[1], liiI1iIi1liiliIIlll) local IIiilll1iliiliililI = lIl1lI1liili11iIilIiI(iIli1Iiii1IlIIi1IIi[2], liiI1iIi1liiliIIlll) local iiII1lillllIil1iIl1 = lIl1lI1liili11iIilIiI(iIli1Iiii1IlIIi1IIi[3], liiI1iIi1liiliIIlll) local li1IIli1ilI1i1IllIl = lIl1lI1liili11iIilIiI(iIli1Iiii1IlIIi1IIi[4], liiI1iIi1liiliIIlll) liiI1iIi1liiliIIlll = (149 * liiI1iIi1liiliIIlll + llll1I1IlIIIi1I1llI) % 256 return li1IIli1ilI1i1IllIl * 16777216 + iiII1lillllIil1iIl1 * 65536 + IIiilll1iliiliililI * 256 + i1I1ii1I1l1lIliiI11 end local function l11lilii1liIIII11ll(lIlI1III1IIII11iI11) local li1illIilIl1ii1111i = Iii11liI11IliIIllll() local llI111IllIIII1iI1Ii = "" for i1IiIiIl1l1I11ilIlI = 1, li1illIilIl1ii1111i do llI111IllIIII1iI1Ii = llI111IllIIII1iI1Ii .. lIl1lIi1lIiiiiiIllIIi(lIl1lI1liili11iIilIiI(lIllliliIlIIliIiIIlI1(i1l1llIilil1i11ili1, IIillliI1Ill1i1iI1i + i1IiIiIl1l1I11ilIlI - 1), IIlili11l11i1lIIllI)) IIlili11l11i1lIIllI = (lIlI1III1IIII11iI11 * IIlili11l11i1lIIllI + 39) % 256 end IIillliI1Ill1i1iI1i = IIillliI1Ill1i1iI1i + li1illIilIl1ii1111i return llI111IllIIII1iI1Ii end IIlili11l11i1lIIllI = lIl11IIiIIiil1i1Il1Il() liiI1iIi1liiliIIlll = lIl11IIiIIiil1i1Il1Il() local function lIl1lI1IIl1I1i1Ii1Iil() local iiIIilil1III1Ill1Il = { [79218] = {}, [24640] = {}, [92846] = {}, [49741] = {} } Iii11liI11IliIIllll() local lIl1I1Ii1liliIIl1I1lI = Iii11liI11IliIIllll() for i1IiIiIl1l1I11ilIlI = Il1llIl1llli1IlIlll, lIl1I1Ii1liliIIl1I1lI do iiIIilil1III1Ill1Il[24640][i1IiIiIl1l1I11ilIlI - Il1llIl1llli1IlIlll] = lIl1lI1IIl1I1i1Ii1Iil() end iiIIilil1III1Ill1Il[85995] = lIl11IIiIIiil1i1Il1Il() lIl11IIiIIiil1i1Il1Il() lIl11IIiIIiil1i1Il1Il() Iii11liI11IliIIllll() Iii11liI11IliIIllll() local lIl1I1Ii1liliIIl1I1lI = Iii11liI11IliIIllll() for i1IiIiIl1l1I11ilIlI = Il1llIl1llli1IlIlll, lIl1I1Ii1liliIIl1I1lI do iiIIilil1III1Ill1Il[49741][i1IiIiIl1l1I11ilIlI] = Iii11liI11IliIIllll() end lIl11IIiIIiil1i1Il1Il() iiIIilil1III1Ill1Il[124725] = lIl11IIiIIiil1i1Il1Il() Iii11liI11IliIIllll() local lIl1I1Ii1liliIIl1I1lI = Iii11liI11IliIIllll() - (#{ 2034, 6219, 5714, 1846, 177, 4199, 6824, 3731, 5005, 3153, 1949, 5421, 3079, 3441, 662, 6371, 6017, 937, 6100, 6128, 3918 } + lIl11lIliliil1lII1iIi + 133617) local IiII1l1iilI1IIIliil = lIl11IIiIIiil1i1Il1Il() for i1IiIiIl1l1I11ilIlI = Il1llIl1llli1IlIlll, lIl1I1Ii1liliIIl1I1lI do local lIliI1lIIIiII11Il1I1l = {} local lIli1iiIlilIIi111ll = lIl11IIiIIiil1i1Il1Il() if lIli1iiIlilIIi111ll == #{ 718, 538, 251, 3417, 2338, 1171, 2732, 3944, 409, 2985, 1618, 6009, 884, 6366, 2851, 4185, 831, 6333, 247, 207, 3684, 1005, 6136 } + lIl11lIliliil1lII1iIi + 90 then lIliI1lIIIiII11Il1I1l[5109] = lIl11IIiIIiil1i1Il1Il() end if lIli1iiIlilIIi111ll == #{ 3850, 2833, 6334, 4362, 1324, 1950, 3326, 6476, 4038, 6264, 4921, 3467, 543, 199, 5657, 638, 3675, 5978, 6038, 97, 6201, 6208 } + lIl11lIliliil1lII1iIi + -9 then lIliI1lIIIiII11Il1I1l[5109] = l11lilii1liIIII11ll(IiII1l1iilI1IIIliil) end if lIli1iiIlilIIi111ll == #{ 6405, 1958, 3780, 910, 3510, 4847, 5515, 6171, 5557, 3330, 531, 1495, 6368, 4316, 1010, 6959, 6113, 6960, 4752, 5133, 6138 } + lIl11lIliliil1lII1iIi + -24 then lIliI1lIIIiII11Il1I1l[5109] = lIl1iIlliiiill1Iil1() end if lIli1iiIlilIIi111ll == #{ 603, 1653, 3711, 2488, 780, 2517, 5984, 3015, 3182, 6261, 2789, 5501, 3470, 6389, 1111, 4225, 4209, 4163, 4271, 5030, 1674, 3318, 4553, 1430 } + lIl11lIliliil1lII1iIi + 41 then lIliI1lIIIiII11Il1I1l[5109] = lIl1iIlliiiill1Iil1() end if lIli1iiIlilIIi111ll == #{ 5991, 3213, 973, 6434, 682, 352, 511, 4851, 1635, 4067, 4743, 4285, 4724, 2872, 3560, 4642, 3443, 2346, 3404, 1328, 2167, 3313, 6175 } + lIl11lIliliil1lII1iIi + 44 then lIliI1lIIIiII11Il1I1l[5109] = #{ 234, 1423, 3549, 3515, 1727, 4576, 3216, 4051, 4874, 2729, 5394, 6401, 4280, 5974, 574, 2151, 2444, 315, 2810, 5443 } + lIl11lIliliil1lII1iIi + 112710 == #{ 1908, 558, 3829, 2260, 6913, 1668, 6424, 4581, 3218, 6365, 3438, 1922, 897, 6099, 4495, 1280, 4315, 5942, 431, 4920, 3680, 97, 3124 } + lIl11lIliliil1lII1iIi + 43606 end if lIli1iiIlilIIi111ll == #{ 995, 696, 2346, 1843, 1532, 5147, 521, 3557, 2160, 3146, 5509, 3966, 5719, 5254, 5647, 241, 1042, 671, 1635, 6169, 5622 } + lIl11lIliliil1lII1iIi + 74 then lIliI1lIIIiII11Il1I1l[5109] = lIl1iIlliiiill1Iil1() end if lIli1iiIlilIIi111ll == #{ 6489, 4984, 3267, 6526, 4042, 833, 5572, 2507, 1599, 3190, 5701, 1828, 1444, 2292, 3050, 6852, 2364, 6469, 6376, 5777, 1634, 809, 763, 608 } + lIl11lIliliil1lII1iIi + -74 then lIliI1lIIIiII11Il1I1l[5109] = Iii11liI11IliIIllll() end if lIli1iiIlilIIi111ll == #{ 3957, 4374, 3061, 6159, 3351, 888, 1499, 2533, 6003, 4968, 2919, 5063, 6878, 381, 4872, 4379, 569, 315, 3838, 2398, 2791 } + lIl11lIliliil1lII1iIi + -31 then lIliI1lIIIiII11Il1I1l[5109] = #{ 1362, 2032, 6827, 5558, 1131, 6354, 1681, 1571, 421, 4392, 71, 4408, 3056, 3213, 2152, 1194, 5328, 252, 6792, 6906, 4119, 6233 } + lIl11lIliliil1lII1iIi + 35095 == #{ 1362, 2032, 6827, 5558, 1131, 6354, 1681, 1571, 421, 4392, 71, 4408, 3056, 3213, 2152, 1194, 5328, 252, 6792, 6906, 4119, 6233 } + lIl11lIliliil1lII1iIi + 35095 end if lIli1iiIlilIIi111ll == #{1547, 331} then lIliI1lIIIiII11Il1I1l[5109] = lIl11IIiIIiil1i1Il1Il() + Iii11liI11IliIIllll() + lIl1iIlliiiill1Iil1() end iiIIilil1III1Ill1Il[79218][i1IiIiIl1l1I11ilIlI - Il1llIl1llli1IlIlll] = lIliI1lIIIiII11Il1I1l end Iii11liI11IliIIllll() lIl11IIiIIiil1i1Il1Il() local lIl1I1Ii1liliIIl1I1lI = Iii11liI11IliIIllll() - (#{ 6777, 1168, 5506, 4326, 1076, 6105, 5979, 4279, 5799, 1326, 5462, 2921, 264, 321, 6290, 4819, 3430, 3663, 3061, 300 } + lIl11lIliliil1lII1iIi + 133604) local ii1lliIiIIl1IIlI1I1 = lIl11IIiIIiil1i1Il1Il() for i1IiIiIl1l1I11ilIlI = Il1llIl1llli1IlIlll, lIl1I1Ii1liliIIl1I1lI do local lIliiIIl1I11il1liliii = {} local ii11liI1lliliiilIl1 = l1l11l11I1IiiIil1II(ii1lliIiIIl1IIlI1I1) lIliiIIl1I11il1liliii[73968] = IilIIIlI1IlIiIIlili(ii11liI1lliliiilIl1, #{ 3921, 6380, 5193, 299, 1651, 4189, 5321, 102, 4566, 197, 4992, 2921, 6559, 79, 5512, 5851, 2423, 4205, 6938, 3970, 1423, 472, 2331, 263 } + lIl11lIliliil1lII1iIi + -88, #{ 773, 5153, 1760, 6950, 532, 3122, 456, 1868, 1593, 5689, 5193, 2548, 1434, 5235, 5363, 2291, 3352, 5340, 3358, 5687 } + lIl11lIliliil1lII1iIi + -79) lIliiIIl1I11il1liliii[82154] = IilIIIlI1IlIiIIlili(ii11liI1lliliiilIl1, #{ 4480, 4126, 3986, 1977, 1276, 1905, 2230, 3666, 1508, 966, 5254, 2884, 2368, 3614, 3466, 5324, 2237, 4522, 1685 }, #{ 1413, 5067, 2922, 56, 126, 4004, 2207, 2506, 2807, 361, 338, 2840, 2834, 916, 3012, 181, 189, 3530, 1460, 181, 1073, 1786 } + lIl11lIliliil1lII1iIi + -87) lIliiIIl1I11il1liliii[104368] = IilIIIlI1IlIiIIlili(ii11liI1lliliiilIl1, #{ 2173, 6158, 6405, 2596, 732, 4244, 4808, 116, 6369, 2876 }, #{ 3730, 341, 3848, 412, 3946, 6704, 6283, 1806, 2844, 6004, 3591, 1985, 2822, 809, 1706, 3221, 6499, 370 }) lIliiIIl1I11il1liliii[34532] = IilIIIlI1IlIiIIlili(ii11liI1lliliiilIl1, #{18}, #{ 140, 3494, 2070, 2912, 6655, 2977, 6947, 1142, 2407 }) lIliiIIl1I11il1liliii[11286] = IilIIIlI1IlIiIIlili(ii11liI1lliliiilIl1, #{3388}, #{ 1840, 6535, 2495, 2323, 5264, 1368, 1098, 2084, 3673, 5212, 2222, 1957, 753, 2520, 3749, 5745, 5084, 5287 }) iiIIilil1III1Ill1Il[92846][i1IiIiIl1l1I11ilIlI] = lIliiIIl1I11il1liliii end iiIIilil1III1Ill1Il[111397] = lIl11IIiIIiil1i1Il1Il() lIl11IIiIIiil1i1Il1Il() Iii11liI11IliIIllll() lIl11IIiIIiil1i1Il1Il() return iiIIilil1III1Ill1Il end local function I1illlIiillll1iI1lI(iiIIilil1III1Ill1Il, iIlI1IIliIiIl1iIIii, IlIi1l11Iii1IIillI1) local IiiIllI1llil1iil111, IiIlIl1Ii1l1IIlIIII = 25, 24 local lIli1llIIll1li11iIi11 = iiIIilil1III1Ill1Il[92846] local i111liii11lii1i1iII = ll11111lliIilIlIlli({}, { __index = function(i1llI1iil11IlilIlIi, iIIili1lliII1iliIl1) local llI111IllIIII1iI1Ii = iiIIilil1III1Ill1Il[79218][iIIili1lliII1iliIl1] if lIlIlIII11I11l11ili1i(lIli1iiIlilIIi111ll(llI111IllIIII1iI1Ii[5109]), 1, 1) == "s" then return { [5109] = lIlIlIII11I11l11ili1i(llI111IllIIII1iI1Ii[5109], 4) } end return llI111IllIIII1iI1Ii end }) local I1iiIiililI1IIiiii1 = 124725 local lIll1iii1IlIiI1i111Il = iiIIilil1III1Ill1Il[24640] local Ii1I1I11i1l1lIilI1I = 5109 local ll1lilIlliIIiIi1IlI = iiIIilil1III1Ill1Il[85995] local lilii1ll111iI1ili11 = iiIIilil1III1Ill1Il[111397] local llIl11lIIiI1llIIIil = 73968 local iIIiI1llilIlIi1IIiI = iiIIilil1III1Ill1Il[49741] local lIlIIIiiIli1111lllI1I = 34532 local function ll111I1lI1IiIliliii(...) local lIli1liIlIlllIIi1IIIl = 0 local lIIiiIiilIiIIilii11 = { liI1lI1Illiiiiii1l1({}, 1, lilii1ll111iI1ili11) } local lIli1lIIiIli1l11IiIIl = 1 local iIil1Ii111IliIliiII = {} local Iiiii111iIli1lillll = {} local iIlI1IIliIiIl1iIIii = Il11ll111IlIlII111l() local Iiiiii1lilliIIii1lI = { ... } local Il1iiiliIIliIlIlIil = #Iiiiii1lilliIIii1lI - 1 for i1IiIiIl1l1I11ilIlI = 0, Il1iiiliIIliIlIlIil do if i1IiIiIl1l1I11ilIlI < ll1lilIlliIIiIi1IlI then lIIiiIiilIiIIilii11[i1IiIiIl1l1I11ilIlI] = Iiiiii1lilliIIii1lI[i1IiIiIl1l1I11ilIlI + 1] end end local function IililIiii1lI11llliI(...) local iiII1lillllIil1iIl1 = iil1iilI1l111lII11i("#", ...) local i1llI1iil11IlilIlIi = { ... } return iiII1lillllIil1iIl1, i1llI1iil11IlilIlIi end local function I1i1I1l11lIiiiiIl11() while true do local iiiIiii1I11I1IIlIll = lIli1llIIll1li11iIi11[lIli1lIIiIli1l11IiIIl] local lIl1lI11liiIIl11II1lI = iiiIiii1I11I1IIlIll[73968] lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl + 1 local I1IiIl11i11i1lilII1 = iiiIiii1I11I1IIlIll[104368] local I11lIiiIiIl1Iil1i11 = iiiIiii1I11I1IIlIll[34532] local lIl1l1II1llIllill11ll = iiiIiii1I11I1IIlIll[82154] local li1iliiilili1i11II1 = iiiIiii1I11I1IIlIll[11286] local IIi1i1IliIIIi1Il1ll = iiiIiii1I11I1IIlIll[11286] - lIll1liIlllIi1I111iiI if lIl1lI11liiIIl11II1lI >= 18 then if lIl1lI11liiIIl11II1lI >= 27 then if lIl1lI11liiIIl11II1lI >= 32 then if lIl1lI11liiIIl11II1lI < 34 then if lIl1lI11liiIIl11II1lI == 33 then if I11lIiiIiIl1Iil1i11 == 169 then lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl - 1 lIli1llIIll1li11iIi11[lIli1lIIiIli1l11IiIIl] = { [73968] = 4, [82154] = (lIl1l1II1llIllill11ll - 110) % 256, [34532] = (I1IiIl11i11i1lilII1 - 110) % 256, [11286] = 0 } else local IIIi1IiI1lIIlilIi1i = lIl1l1II1llIllill11ll + 2 local IlIilIIliIilii1iIii = { lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll](lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll + 1], lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll + 2]) } for i1IiIiIl1l1I11ilIlI = 1, I1IiIl11i11i1lilII1 do lIIiiIiilIiIIilii11[IIIi1IiI1lIIlilIi1i + i1IiIiIl1l1I11ilIlI] = IlIilIIliIilii1iIii[i1IiIiIl1l1I11ilIlI] end if lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll + 3] ~= nil then lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll + 2] = lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll + 3] else lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl + 1 end end else lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = { liI1lI1Illiiiiii1l1(iIlll1i1l111i1lIii1, 1, I11lIiiIiIl1Iil1i11 == 0 and 255 or I11lIiiIiIl1Iil1i11) } end elseif lIl1lI11liiIIl11II1lI >= 35 then if lIl1lI11liiIIl11II1lI == 36 then if not not lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] == (I1IiIl11i11i1lilII1 == 0) then lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl + 1 end else IlIi1l11Iii1IIillI1[I11lIiiIiIl1Iil1i11] = lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] end else for i1IiIiIl1l1I11ilIlI = lIl1l1II1llIllill11ll, I11lIiiIiIl1Iil1i11 do lIIiiIiilIiIIilii11[i1IiIiIl1l1I11ilIlI] = nil end end elseif lIl1lI11liiIIl11II1lI >= 29 then if lIl1lI11liiIIl11II1lI >= 30 then if lIl1lI11liiIIl11II1lI == 31 then if I11lIiiIiIl1Iil1i11 > 255 then I11lIiiIiIl1Iil1i11 = i111liii11lii1i1iII[I11lIiiIiIl1Iil1i11 - 256][Ii1I1I11i1l1lIilI1I] else I11lIiiIiIl1Iil1i11 = lIIiiIiilIiIIilii11[I11lIiiIiIl1Iil1i11] end if I1IiIl11i11i1lilII1 > 255 then I1IiIl11i11i1lilII1 = i111liii11lii1i1iII[I1IiIl11i11i1lilII1 - 256][Ii1I1I11i1l1lIilI1I] else I1IiIl11i11i1lilII1 = lIIiiIiilIiIIilii11[I1IiIl11i11i1lilII1] end if I11lIiiIiIl1Iil1i11 <= I1IiIl11i11i1lilII1 ~= (lIl1l1II1llIllill11ll ~= 0) then lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl + 1 end else if I11lIiiIiIl1Iil1i11 > 255 then I11lIiiIiIl1Iil1i11 = i111liii11lii1i1iII[I11lIiiIiIl1Iil1i11 - 256][Ii1I1I11i1l1lIilI1I] else I11lIiiIiIl1Iil1i11 = lIIiiIiilIiIIilii11[I11lIiiIiIl1Iil1i11] end if I1IiIl11i11i1lilII1 > 255 then I1IiIl11i11i1lilII1 = i111liii11lii1i1iII[I1IiIl11i11i1lilII1 - 256][Ii1I1I11i1l1lIilI1I] else I1IiIl11i11i1lilII1 = lIIiiIiilIiIIilii11[I1IiIl11i11i1lilII1] end lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = I11lIiiIiIl1Iil1i11 / I1IiIl11i11i1lilII1 end else lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = -lIIiiIiilIiIIilii11[I11lIiiIiIl1Iil1i11] end elseif lIl1lI11liiIIl11II1lI == 28 then local lIlIliliIi11llI1l1lIi = lIll1iii1IlIiI1i111Il[li1iliiilili1i11II1] local i1i1llll1ilIil1lIlI = {} if lIlIliliIi11llI1l1lIi[I1iiIiililI1IIiiii1] > 0 then do local il11il1ilillliliiI1 = {} i1i1llll1ilIil1lIlI = ll11111lliIilIlIlli({}, { __index = function(i1llI1iil11IlilIlIi, iIIili1lliII1iliIl1) local lIlIii1iI1l1IllIIIIII = il11il1ilillliliiI1[iIIili1lliII1iliIl1] return lIlIii1iI1l1IllIIIIII[1][lIlIii1iI1l1IllIIIIII[2]] end, __newindex = function(i1llI1iil11IlilIlIi, iIIili1lliII1iliIl1, lIli11l11i1li1illii1i) local lIlIii1iI1l1IllIIIIII = il11il1ilillliliiI1[iIIili1lliII1iliIl1] lIlIii1iI1l1IllIIIIII[1][lIlIii1iI1l1IllIIIIII[2]] = lIli11l11i1li1illii1i end }) for i1IiIiIl1l1I11ilIlI = 1, lIlIliliIi11llI1l1lIi[I1iiIiililI1IIiiii1] do local lIliilIlIi11iIllllili = lIli1llIIll1li11iIi11[lIli1lIIiIli1l11IiIIl] if lIliilIlIi11iIllllili[llIl11lIIiI1llIIIil] == IiiIllI1llil1iil111 then il11il1ilillliliiI1[i1IiIiIl1l1I11ilIlI - 1] = { lIIiiIiilIiIIilii11, lIliilIlIi11iIllllili[lIlIIIiiIli1111lllI1I] } elseif lIliilIlIi11iIllllili[llIl11lIIiI1llIIIil] == IiIlIl1Ii1l1IIlIIII then il11il1ilillliliiI1[i1IiIiIl1l1I11ilIlI - 1] = { IlIi1l11Iii1IIillI1, lIliilIlIi11iIllllili[lIlIIIiiIli1111lllI1I] } end lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl + 1 end if not iIil1Ii111IliIliiII[lIIiiIiilIiIIilii11] then iIil1Ii111IliIliiII[lIIiiIiilIiIIilii11] = {il11il1ilillliliiI1} else table.insert(iIil1Ii111IliIliiII[lIIiiIiilIiIIilii11], il11il1ilillliliiI1) end end end local ili1ii1Il1il1IIiI1i = I1illlIiillll1iI1lI(lIlIliliIi11llI1l1lIi, iIlI1IIliIiIl1iIIii, i1i1llll1ilIil1lIlI) lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = ili1ii1Il1il1IIiI1i else local iiiiilIlii11II11lli, lIliiiil11lIIIi11Il1i, I1i1I1l11lIiiiiIl11 if I11lIiiIiIl1Iil1i11 ~= 1 then if I11lIiiIiIl1Iil1i11 ~= 0 then lIliiiil11lIIIi11Il1i = lIl1l1II1llIllill11ll + I11lIiiIiIl1Iil1i11 - 1 else lIliiiil11lIIIi11Il1i = lIli1liIlIlllIIi1IIIl end lIliiiil11lIIIi11Il1i, iiiiilIlii11II11lli = IililIiii1lI11llliI(lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll](liI1lI1Illiiiiii1l1(lIIiiIiilIiIIilii11, lIl1l1II1llIllill11ll + 1, lIliiiil11lIIIi11Il1i))) else lIliiiil11lIIIi11Il1i, iiiiilIlii11II11lli = IililIiii1lI11llliI(lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll]()) end if I1IiIl11i11i1lilII1 ~= 1 then if I1IiIl11i11i1lilII1 ~= 0 then lIliiiil11lIIIi11Il1i = lIl1l1II1llIllill11ll + I1IiIl11i11i1lilII1 - 2 lIli1liIlIlllIIi1IIIl = lIliiiil11lIIIi11Il1i + 1 else lIliiiil11lIIIi11Il1i = lIliiiil11lIIIi11Il1i + lIl1l1II1llIllill11ll - 1 lIli1liIlIlllIIi1IIIl = lIliiiil11lIIIi11Il1i end I1i1I1l11lIiiiiIl11 = 0 for i1IiIiIl1l1I11ilIlI = lIl1l1II1llIllill11ll, lIliiiil11lIIIi11Il1i do I1i1I1l11lIiiiiIl11 = I1i1I1l11lIiiiiIl11 + 1 lIIiiIiilIiIIilii11[i1IiIiIl1l1I11ilIlI] = iiiiilIlii11II11lli[I1i1I1l11lIiiiiIl11] end else lIli1liIlIlllIIi1IIIl = lIl1l1II1llIllill11ll - 1 end for i1IiIiIl1l1I11ilIlI = lIli1liIlIlllIIi1IIIl + 1, lilii1ll111iI1ili11 do lIIiiIiilIiIIilii11[i1IiIiIl1l1I11ilIlI] = nil end end elseif lIl1lI11liiIIl11II1lI >= 22 then if lIl1lI11liiIIl11II1lI >= 24 then if lIl1lI11liiIIl11II1lI >= 25 then if lIl1lI11liiIIl11II1lI == 26 then if I11lIiiIiIl1Iil1i11 > 255 then I11lIiiIiIl1Iil1i11 = i111liii11lii1i1iII[I11lIiiIiIl1Iil1i11 - 256][Ii1I1I11i1l1lIilI1I] else I11lIiiIiIl1Iil1i11 = lIIiiIiilIiIIilii11[I11lIiiIiIl1Iil1i11] end if I1IiIl11i11i1lilII1 > 255 then I1IiIl11i11i1lilII1 = i111liii11lii1i1iII[I1IiIl11i11i1lilII1 - 256][Ii1I1I11i1l1lIilI1I] else I1IiIl11i11i1lilII1 = lIIiiIiilIiIIilii11[I1IiIl11i11i1lilII1] end lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = I11lIiiIiIl1Iil1i11 ^ I1IiIl11i11i1lilII1 elseif I1IiIl11i11i1lilII1 == 247 then lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl - 1 lIli1llIIll1li11iIi11[lIli1lIIiIli1l11IiIIl] = { [73968] = 29, [82154] = (lIl1l1II1llIllill11ll - 15) % 256, [34532] = (I11lIiiIiIl1Iil1i11 - 15) % 256, [11286] = 0 } elseif I1IiIl11i11i1lilII1 == 161 then lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl - 1 lIli1llIIll1li11iIi11[lIli1lIIiIli1l11IiIIl] = { [73968] = 10, [82154] = (lIl1l1II1llIllill11ll - 186) % 256, [34532] = (I11lIiiIiIl1Iil1i11 - 186) % 256, [11286] = 0 } else lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = lIIiiIiilIiIIilii11[I11lIiiIiIl1Iil1i11] end elseif I1IiIl11i11i1lilII1 == 77 then lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl - 1 lIli1llIIll1li11iIi11[lIli1lIIiIli1l11IiIIl] = { [73968] = 36, [82154] = (lIl1l1II1llIllill11ll - 241) % 256, [104368] = (I11lIiiIiIl1Iil1i11 - 241) % 256, [11286] = 0 } else lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = IlIi1l11Iii1IIillI1[I11lIiiIiIl1Iil1i11] end elseif lIl1lI11liiIIl11II1lI ~= 23 then I11lIiiIiIl1Iil1i11 = lIIiiIiilIiIIilii11[I11lIiiIiIl1Iil1i11] if I1IiIl11i11i1lilII1 > 255 then I1IiIl11i11i1lilII1 = i111liii11lii1i1iII[I1IiIl11i11i1lilII1 - 256][Ii1I1I11i1l1lIilI1I] else I1IiIl11i11i1lilII1 = lIIiiIiilIiIIilii11[I1IiIl11i11i1lilII1] end lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll + 1] = I11lIiiIiIl1Iil1i11 lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = I11lIiiIiIl1Iil1i11[I1IiIl11i11i1lilII1] elseif I1IiIl11i11i1lilII1 == 135 then lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl - 1 lIli1llIIll1li11iIi11[lIli1lIIiIli1l11IiIIl] = { [73968] = 6, [82154] = (lIl1l1II1llIllill11ll - 136) % 256, [34532] = (I11lIiiIiIl1Iil1i11 - 136) % 256, [11286] = 0 } else lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = #lIIiiIiilIiIIilii11[I11lIiiIiIl1Iil1i11] end elseif lIl1lI11liiIIl11II1lI < 20 then if lIl1lI11liiIIl11II1lI == 19 then if not not lIIiiIiilIiIIilii11[I11lIiiIiIl1Iil1i11] == (I1IiIl11i11i1lilII1 == 0) then lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl + 1 else lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = lIIiiIiilIiIIilii11[I11lIiiIiIl1Iil1i11] end else if I1IiIl11i11i1lilII1 > 255 then I1IiIl11i11i1lilII1 = i111liii11lii1i1iII[I1IiIl11i11i1lilII1 - 256][Ii1I1I11i1l1lIilI1I] else I1IiIl11i11i1lilII1 = lIIiiIiilIiIIilii11[I1IiIl11i11i1lilII1] end lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = lIIiiIiilIiIIilii11[I11lIiiIiIl1Iil1i11][I1IiIl11i11i1lilII1] end elseif lIl1lI11liiIIl11II1lI ~= 21 then if I11lIiiIiIl1Iil1i11 > 255 then I11lIiiIiIl1Iil1i11 = i111liii11lii1i1iII[I11lIiiIiIl1Iil1i11 - 256][Ii1I1I11i1l1lIilI1I] else I11lIiiIiIl1Iil1i11 = lIIiiIiilIiIIilii11[I11lIiiIiIl1Iil1i11] end if I1IiIl11i11i1lilII1 > 255 then I1IiIl11i11i1lilII1 = i111liii11lii1i1iII[I1IiIl11i11i1lilII1 - 256][Ii1I1I11i1l1lIilI1I] else I1IiIl11i11i1lilII1 = lIIiiIiilIiIIilii11[I1IiIl11i11i1lilII1] end lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = I11lIiiIiIl1Iil1i11 + I1IiIl11i11i1lilII1 else lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = iIlI1IIliIiIl1iIIii[i111liii11lii1i1iII[li1iliiilili1i11II1][Ii1I1I11i1l1lIilI1I]] end elseif lIl1lI11liiIIl11II1lI >= 9 then if lIl1lI11liiIIl11II1lI >= 13 then if lIl1lI11liiIIl11II1lI < 15 then if lIl1lI11liiIIl11II1lI ~= 14 then local IIIi1IiI1lIIlilIi1i = (I1IiIl11i11i1lilII1 - 1) * 50 if I11lIiiIiIl1Iil1i11 == 0 then I11lIiiIiIl1Iil1i11 = lIli1liIlIlllIIi1IIIl - lIl1l1II1llIllill11ll end for i1IiIiIl1l1I11ilIlI = 1, I11lIiiIiIl1Iil1i11 do lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll][IIIi1IiI1lIIlilIi1i + i1IiIiIl1l1I11ilIlI] = lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll + i1IiIiIl1l1I11ilIlI] end else if I11lIiiIiIl1Iil1i11 > 255 then I11lIiiIiIl1Iil1i11 = i111liii11lii1i1iII[I11lIiiIiIl1Iil1i11 - 256][Ii1I1I11i1l1lIilI1I] else I11lIiiIiIl1Iil1i11 = lIIiiIiilIiIIilii11[I11lIiiIiIl1Iil1i11] end if I1IiIl11i11i1lilII1 > 255 then I1IiIl11i11i1lilII1 = i111liii11lii1i1iII[I1IiIl11i11i1lilII1 - 256][Ii1I1I11i1l1lIilI1I] else I1IiIl11i11i1lilII1 = lIIiiIiilIiIIilii11[I1IiIl11i11i1lilII1] end lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll][I11lIiiIiIl1Iil1i11] = I1IiIl11i11i1lilII1 end elseif lIl1lI11liiIIl11II1lI >= 16 then if lIl1lI11liiIIl11II1lI ~= 17 then if I11lIiiIiIl1Iil1i11 > 255 then I11lIiiIiIl1Iil1i11 = i111liii11lii1i1iII[I11lIiiIiIl1Iil1i11 - 256][Ii1I1I11i1l1lIilI1I] else I11lIiiIiIl1Iil1i11 = lIIiiIiilIiIIilii11[I11lIiiIiIl1Iil1i11] end if I1IiIl11i11i1lilII1 > 255 then I1IiIl11i11i1lilII1 = i111liii11lii1i1iII[I1IiIl11i11i1lilII1 - 256][Ii1I1I11i1l1lIilI1I] else I1IiIl11i11i1lilII1 = lIIiiIiilIiIIilii11[I1IiIl11i11i1lilII1] end lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = I11lIiiIiIl1Iil1i11 - I1IiIl11i11i1lilII1 else if I11lIiiIiIl1Iil1i11 > 255 then I11lIiiIiIl1Iil1i11 = i111liii11lii1i1iII[I11lIiiIiIl1Iil1i11 - 256][Ii1I1I11i1l1lIilI1I] else I11lIiiIiIl1Iil1i11 = lIIiiIiilIiIIilii11[I11lIiiIiIl1Iil1i11] end if I1IiIl11i11i1lilII1 > 255 then I1IiIl11i11i1lilII1 = i111liii11lii1i1iII[I1IiIl11i11i1lilII1 - 256][Ii1I1I11i1l1lIilI1I] else I1IiIl11i11i1lilII1 = lIIiiIiilIiIIilii11[I1IiIl11i11i1lilII1] end if I11lIiiIiIl1Iil1i11 == I1IiIl11i11i1lilII1 ~= (lIl1l1II1llIllill11ll ~= 0) then lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl + 1 end end else local IlIilIIliIilii1iIii = lIIiiIiilIiIIilii11[I11lIiiIiIl1Iil1i11] for i1IiIiIl1l1I11ilIlI = I11lIiiIiIl1Iil1i11 + 1, I1IiIl11i11i1lilII1 do IlIilIIliIilii1iIii = IlIilIIliIilii1iIii .. lIIiiIiilIiIIilii11[i1IiIiIl1l1I11ilIlI] end lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = IlIilIIliIilii1iIii end elseif lIl1lI11liiIIl11II1lI < 11 then if lIl1lI11liiIIl11II1lI ~= 10 then lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = li1llill11I1i11ll11(lIl1IiIi1lIiI1lii1ill(lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll]), "`for` initial value must be a number") lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll + 1] = li1llill11I1i11ll11(lIl1IiIi1lIiI1lii1ill(lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll + 1]), "`for` limit value must be a number") lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll + 2] = li1llill11I1i11ll11(lIl1IiIi1lIiI1lii1ill(lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll + 2]), "`for` step value must be a number") lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] - lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll + 2] lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl + IIi1i1IliIIIi1Il1ll else iIil1Ii111IliIliiII[lIIiiIiilIiIIilii11] = nil if I11lIiiIiIl1Iil1i11 == 1 then return true end local lIliiiil11lIIIi11Il1i = lIl1l1II1llIllill11ll + I11lIiiIiIl1Iil1i11 - 2 if I11lIiiIiIl1Iil1i11 == 0 then lIliiiil11lIIIi11Il1i = lIli1liIlIlllIIi1IIIl end return true, lIl1l1II1llIllill11ll, lIliiiil11lIIIi11Il1i end elseif lIl1lI11liiIIl11II1lI ~= 12 then local lIliIilII1I11ii1iiI1i = lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll + 2] local IIillliI1Ill1i1iI1i = lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] + lIliIilII1I11ii1iiI1i lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = IIillliI1Ill1i1iI1i if lIliIilII1I11ii1iiI1i > 0 then if IIillliI1Ill1i1iI1i <= lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll + 1] then lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl + IIi1i1IliIIIi1Il1ll lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll + 3] = IIillliI1Ill1i1iI1i end elseif IIillliI1Ill1i1iI1i >= lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll + 1] then lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl + IIi1i1IliIIIi1Il1ll lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll + 3] = IIillliI1Ill1i1iI1i end else iIil1Ii111IliIliiII[lIIiiIiilIiIIilii11] = nil local iiiiilIlii11II11lli, lIliiiil11lIIIi11Il1i if I11lIiiIiIl1Iil1i11 ~= 1 then if I11lIiiIiIl1Iil1i11 ~= 0 then lIliiiil11lIIIi11Il1i = lIl1l1II1llIllill11ll + I11lIiiIiIl1Iil1i11 - 1 else lIliiiil11lIIIi11Il1i = lIli1liIlIlllIIi1IIIl end lIliiiil11lIIIi11Il1i, iiiiilIlii11II11lli = IililIiii1lI11llliI(lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll](liI1lI1Illiiiiii1l1(lIIiiIiilIiIIilii11, lIl1l1II1llIllill11ll + 1, lIliiiil11lIIIi11Il1i))) else lIliiiil11lIIIi11Il1i, iiiiilIlii11II11lli = IililIiii1lI11llliI(lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll]()) end lIIiiIiilIiIIilii11 = iiiiilIlii11II11lli return true, 1, lIliiiil11lIIIi11Il1i end elseif lIl1lI11liiIIl11II1lI >= 4 then if lIl1lI11liiIIl11II1lI >= 6 then if lIl1lI11liiIIl11II1lI < 7 then if I1IiIl11i11i1lilII1 == 48 then lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl - 1 lIli1llIIll1li11iIi11[lIli1lIIiIli1l11IiIIl] = { [73968] = 25, [82154] = (lIl1l1II1llIllill11ll - 105) % 256, [34532] = (I11lIiiIiIl1Iil1i11 - 105) % 256, [11286] = 0 } elseif I1IiIl11i11i1lilII1 == 81 then lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl - 1 lIli1llIIll1li11iIi11[lIli1lIIiIli1l11IiIIl] = { [73968] = 34, [82154] = (lIl1l1II1llIllill11ll - 149) % 256, [34532] = (I11lIiiIiIl1Iil1i11 - 149) % 256, [11286] = 0 } else lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = not lIIiiIiilIiIIilii11[I11lIiiIiIl1Iil1i11] end elseif lIl1lI11liiIIl11II1lI ~= 8 then lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = i111liii11lii1i1iII[li1iliiilili1i11II1][Ii1I1I11i1l1lIilI1I] else iIlI1IIliIiIl1iIIii[i111liii11lii1i1iII[li1iliiilili1i11II1][Ii1I1I11i1l1lIilI1I]] = lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] end elseif lIl1lI11liiIIl11II1lI == 5 then lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl + IIi1i1IliIIIi1Il1ll elseif I1IiIl11i11i1lilII1 == 26 then lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl - 1 lIli1llIIll1li11iIi11[lIli1lIIiIli1l11IiIIl] = { [73968] = 24, [82154] = (lIl1l1II1llIllill11ll - 96) % 256, [34532] = (I11lIiiIiIl1Iil1i11 - 96) % 256, [11286] = 0 } elseif I1IiIl11i11i1lilII1 == 3 then lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl - 1 lIli1llIIll1li11iIi11[lIli1lIIiIli1l11IiIIl] = { [73968] = 3, [82154] = (lIl1l1II1llIllill11ll - 132) % 256, [34532] = (I11lIiiIiIl1Iil1i11 - 132) % 256, [11286] = 0 } else local liIiiI1lI11illl1iii = {} for lI1l1liIi1lI1I11Ill, il11il1ilillliliiI1 in pairs(iIil1Ii111IliIliiII[lIIiiIiilIiIIilii11]) do for lI1l1liIi1lI1I11Ill, lIlIii1iI1l1IllIIIIII in pairs(il11il1ilillliliiI1) do if lIlIii1iI1l1IllIIIIII[1] == lIIiiIiilIiIIilii11 and lIl1l1II1llIllill11ll <= lIlIii1iI1l1IllIIIIII[2] then local IiilII11l1IiIiIiIli = lIlIii1iI1l1IllIIIIII[2] if not liIiiI1lI11illl1iii[IiilII11l1IiIiIiIli] then table.insert(Iiiii111iIli1lillll, lIIiiIiilIiIIilii11[IiilII11l1IiIiIiIli]) liIiiI1lI11illl1iii[IiilII11l1IiIiIiIli] = #Iiiii111iIli1lillll end lIlIii1iI1l1IllIIIIII[1] = Iiiii111iIli1lillll lIlIii1iI1l1IllIIIIII[2] = liIiiI1lI11illl1iii[IiilII11l1IiIiIiIli] end end end end elseif lIl1lI11liiIIl11II1lI >= 2 then if lIl1lI11liiIIl11II1lI ~= 3 then if I11lIiiIiIl1Iil1i11 > 255 then I11lIiiIiIl1Iil1i11 = i111liii11lii1i1iII[I11lIiiIiIl1Iil1i11 - 256][Ii1I1I11i1l1lIilI1I] else I11lIiiIiIl1Iil1i11 = lIIiiIiilIiIIilii11[I11lIiiIiIl1Iil1i11] end if I1IiIl11i11i1lilII1 > 255 then I1IiIl11i11i1lilII1 = i111liii11lii1i1iII[I1IiIl11i11i1lilII1 - 256][Ii1I1I11i1l1lIilI1I] else I1IiIl11i11i1lilII1 = lIIiiIiilIiIIilii11[I1IiIl11i11i1lilII1] end lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = I11lIiiIiIl1Iil1i11 % I1IiIl11i11i1lilII1 elseif I1IiIl11i11i1lilII1 == 112 then lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl - 1 lIli1llIIll1li11iIi11[lIli1lIIiIli1l11IiIIl] = { [73968] = 33, [82154] = (lIl1l1II1llIllill11ll - 252) % 256, [104368] = (I11lIiiIiIl1Iil1i11 - 252) % 256, [11286] = 0 } else local Iil11iIlili1lI111ll = I11lIiiIiIl1Iil1i11 > 0 and I11lIiiIiIl1Iil1i11 - 1 or Il1iiiliIIliIlIlIil - ll1lilIlliIIiIi1IlI if Iil11iIlili1lI111ll < 0 then Iil11iIlili1lI111ll = -1 end for i1IiIiIl1l1I11ilIlI = lIl1l1II1llIllill11ll, lIl1l1II1llIllill11ll + Iil11iIlili1lI111ll do lIIiiIiilIiIIilii11[i1IiIiIl1l1I11ilIlI] = Iiiiii1lilliIIii1lI[ll1lilIlliIIiIi1IlI + (i1IiIiIl1l1I11ilIlI - lIl1l1II1llIllill11ll) + 1] end if I11lIiiIiIl1Iil1i11 == 0 then lIli1liIlIlllIIi1IIIl = lIl1l1II1llIllill11ll + Iil11iIlili1lI111ll for i1IiIiIl1l1I11ilIlI = lIli1liIlIlllIIi1IIIl + 1, lilii1ll111iI1ili11 do lIIiiIiilIiIIilii11[i1IiIiIl1l1I11ilIlI] = nil end end end elseif lIl1lI11liiIIl11II1lI ~= 1 then if I11lIiiIiIl1Iil1i11 > 255 then I11lIiiIiIl1Iil1i11 = i111liii11lii1i1iII[I11lIiiIiIl1Iil1i11 - 256][Ii1I1I11i1l1lIilI1I] else I11lIiiIiIl1Iil1i11 = lIIiiIiilIiIIilii11[I11lIiiIiIl1Iil1i11] end if I1IiIl11i11i1lilII1 > 255 then I1IiIl11i11i1lilII1 = i111liii11lii1i1iII[I1IiIl11i11i1lilII1 - 256][Ii1I1I11i1l1lIilI1I] else I1IiIl11i11i1lilII1 = lIIiiIiilIiIIilii11[I1IiIl11i11i1lilII1] end lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = I11lIiiIiIl1Iil1i11 * I1IiIl11i11i1lilII1 else lIIiiIiilIiIIilii11[lIl1l1II1llIllill11ll] = I11lIiiIiIl1Iil1i11 ~= 0 if I1IiIl11i11i1lilII1 ~= 0 then lIli1lIIiIli1l11IiIIl = lIli1lIIiIli1l11IiIIl + 1 end end end end local IliIi1liilIIiilIIlI, llI111IllIIII1iI1Ii, lI1il1iII111IIlIl1I, lIlIiI11li111i11IiiIl = Ii1li1llli1lI1i111I(I1i1I1l11lIiiiiIl11) if IliIi1liilIIiilIIlI then if lI1il1iII111IIlIl1I then return liI1lI1Illiiiiii1l1(lIIiiIiilIiIIilii11, lI1il1iII111IIlIl1I, lIlIiI11li111i11IiiIl) end else lIlIIIl1i11illIiIl1("Luraph Script:" .. (iIIiI1llilIlIi1IIiI[lIli1lIIiIli1l11IiIIl - 1] or "") .. ": " .. l1l11IIl11I1I1iiI1l(llI111IllIIII1iI1Ii), 0) end end iII11l1ilii1i1lil1i(ll111I1lI1IiIliliii, iIlI1IIliIiIl1iIIii) return ll111I1lI1IiIliliii end local liIiiI1lI11illl1iii = lIl1lI1IIl1I1i1Ii1Iil() return I1illlIiillll1iI1lI(liIiiI1lI11illl1iii, iIlI1IIliIiIl1iIIii)() end lIlI11liil1iiIl1lIIIll11ll111IlIlII111l()) 

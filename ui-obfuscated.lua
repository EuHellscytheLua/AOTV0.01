-- This file was generated using Luraph Obfuscator v12.3 by memcorrupt.

local iiiliilI1iIi11ii1l1 = assert local lIl1Iii1lIl11l1i1ii1I = select local iIiI1iiIIiIIIl1Illi = tonumber local lIlilliii1iIIIliI1iIi = unpack local llilIl11l1Il1II111l = pcall local lIl1IIIllIIIl1iIIiIll = setfenv local lIlI1llli11Iii11IIl11 = setmetatable local lIli1IilIiIi1iliI1i = type local II1IllIliIIlillI1il = getfenv local lIliii11lIl11i1iIl1II = tostring local li1ill1ii1iIll1IilI = error local lIlII11ll11il1IiIliiI = string.sub local l11lI1Ii1I1I11Ill11 = string.byte local IliilIi1I11iIiil1il = string.char local lIIl11liIiliilli111 = string.rep local Iilli11Il1iilii1l1l = string.gsub local lIlIIIIiIlI11Iiiii11l = string.match local I11iIlll1iii1ii1i11 = l11lI1Ii1I1I11Ill11("/", 1) local iIlll111Ili1IiI11lI, lIlI1illIlli11iIilIlI = #{4279}, #{ 5209, 4952, 4602, 871, 1229, 4739, 573, 134, 4235, 6672, 869, 1123, 959, 6953, 4057, 420, 3749, 5818, 2721, 1051, 3492 } + I11iIlll1iii1ii1i11 + 131003 local Iil1IilIllilliIiIIl = {} local lilI11I1liIl11liIII = 1 local ii1lilllIilIIl1l1ll, Illli1iI1lIilill11I local function lIi1i11l1Ili1I11lIi(IiIliii11IIl111iiiI, lIllii111lI1IIl1llII1) local il11lI11iII1IlI1l1l IiIliii11IIl111iiiI = Iilli11Il1iilii1l1l(lIlII11ll11il1IiIliiI(IiIliii11IIl111iiiI, 5), "..", function(llI1II1111i1l1l1Iil) if l11lI1Ii1I1I11Ill11(llI1II1111i1l1l1Iil, 2) == 72 then il11lI11iII1IlI1l1l = iIiI1iiIIiIIIl1Illi(lIlII11ll11il1IiIliiI(llI1II1111i1l1l1Iil, 1, 1)) return "" else local IiI1il111liiiii1II1 = IliilIi1I11iIiil1il(iIiI1iiIIiIIIl1Illi(llI1II1111i1l1l1Iil, 16)) if il11lI11iII1IlI1l1l then local I11iIIi1llIl1Ii1i1l = lIIl11liIiliilli111(IiI1il111liiiii1II1, il11lI11iII1IlI1l1l) il11lI11iII1IlI1l1l = nil return I11iIIi1llIl1Ii1i1l else return IiI1il111liiiii1II1 end end end) local function iI111i1iI1il1I1i1lI() local llil1IlIlli1lI1Ill1 = l11lI1Ii1I1I11Ill11(IiIliii11IIl111iiiI, lilI11I1liIl11liIII, lilI11I1liIl11liIII) lilI11I1liIl11liIII = lilI11I1liIl11liIII + 1 return llil1IlIlli1lI1Ill1 end local function IiIililiilIli1liilI() local llil1IlIlli1lI1Ill1, IiI1il111liiiii1II1, I11iIIi1llIl1Ii1i1l, Ii1iiiIllIIIiililI1 = l11lI1Ii1I1I11Ill11(IiIliii11IIl111iiiI, lilI11I1liIl11liIII, lilI11I1liIl11liIII + 3) lilI11I1liIl11liIII = lilI11I1liIl11liIII + 4 return Ii1iiiIllIIIiililI1 * 16777216 + I11iIIi1llIl1Ii1i1l * 65536 + IiI1il111liiiii1II1 * 256 + llil1IlIlli1lI1Ill1 end local function lIlil1liii11iilill1ii(i11ll11Ill1llII1ii1, IIll11iii11ilII111i, liIillIliIl1IlIl1il) if liIillIliIl1IlIl1il then local i1l11I1Il11l1IIIl1l, il11il1IiIlIIiIili1 = 0, 0 for lIlil1iIiiiiI1ii1i1Il = IIll11iii11ilII111i, liIillIliIl1IlIl1il do i1l11I1Il11l1IIIl1l = i1l11I1Il11l1IIIl1l + 2 ^ il11il1IiIlIIiIili1 * lIlil1liii11iilill1ii(i11ll11Ill1llII1ii1, lIlil1iIiiiiI1ii1i1Il) il11il1IiIlIIiIili1 = il11il1IiIlIIiIili1 + 1 end return i1l11I1Il11l1IIIl1l else local lIli1ilii1lllIi1ii1Ii = 2 ^ (IIll11iii11ilII111i - 1) return lIli1ilii1lllIi1ii1Ii <= i11ll11Ill1llII1ii1 % (lIli1ilii1lllIi1ii1Ii + lIli1ilii1lllIi1ii1Ii) and 1 or 0 end end local function I1iill11i11IIilli11() local llil1IlIlli1lI1Ill1, IiI1il111liiiii1II1 = IiIililiilIli1liilI(), IiIililiilIli1liilI() if llil1IlIlli1lI1Ill1 == 0 and IiI1il111liiiii1II1 == 0 then return 0 end return (-2 * lIlil1liii11iilill1ii(IiI1il111liiiii1II1, 32) + 1) * 2 ^ (lIlil1liii11iilill1ii(IiI1il111liiiii1II1, 21, 31) - 1023) * ((lIlil1liii11iilill1ii(IiI1il111liiiii1II1, 1, 20) * 4294967296 + llil1IlIlli1lI1Ill1) / 4503599627370496 + 1) end local lIl111IIIiiIiIl1Il1il = function(llil1IlIlli1lI1Ill1, IiI1il111liiiii1II1) local lIliIIII1iiIil11I1il1 = 1 local I11iIIi1llIl1Ii1i1l = 0 while llil1IlIlli1lI1Ill1 > 0 and IiI1il111liiiii1II1 > 0 do local lIll1i1IiliIlI1i11i11 = llil1IlIlli1lI1Ill1 % 2 local iI1II1iIi11Ii1111ii = IiI1il111liiiii1II1 % 2 if lIll1i1IiliIlI1i11i11 ~= iI1II1iIi11Ii1111ii then I11iIIi1llIl1Ii1i1l = I11iIIi1llIl1Ii1i1l + lIliIIII1iiIil11I1il1 end llil1IlIlli1lI1Ill1 = (llil1IlIlli1lI1Ill1 - lIll1i1IiliIlI1i11i11) / 2 IiI1il111liiiii1II1 = (IiI1il111liiiii1II1 - iI1II1iIi11Ii1111ii) / 2 lIliIIII1iiIil11I1il1 = lIliIIII1iiIil11I1il1 * 2 end if llil1IlIlli1lI1Ill1 < IiI1il111liiiii1II1 then llil1IlIlli1lI1Ill1 = IiI1il111liiiii1II1 end while llil1IlIlli1lI1Ill1 > 0 do local lIll1i1IiliIlI1i11i11 = llil1IlIlli1lI1Ill1 % 2 if lIll1i1IiliIlI1i11i11 > 0 then I11iIIi1llIl1Ii1i1l = I11iIIi1llIl1Ii1i1l + lIliIIII1iiIil11I1il1 end llil1IlIlli1lI1Ill1 = (llil1IlIlli1lI1Ill1 - lIll1i1IiliIlI1i11i11) / 2 lIliIIII1iiIil11I1il1 = lIliIIII1iiIil11I1il1 * 2 end return I11iIIi1llIl1Ii1i1l end local function liIl1I1liIlilIiilll(IlllIIl1IIiII1iiIl1) local Ii1i1ll1IiiIIIIIIiI = { l11lI1Ii1I1I11Ill11(IiIliii11IIl111iiiI, lilI11I1liIl11liIII, lilI11I1liIl11liIII + 3) } lilI11I1liIl11liIII = lilI11I1liIl11liIII + 4 local llil1IlIlli1lI1Ill1 = lIl111IIIiiIiIl1Il1il(Ii1i1ll1IiiIIIIIIiI[1], Illli1iI1lIilill11I) local IiI1il111liiiii1II1 = lIl111IIIiiIiIl1Il1il(Ii1i1ll1IiiIIIIIIiI[2], Illli1iI1lIilill11I) local I11iIIi1llIl1Ii1i1l = lIl111IIIiiIiIl1Il1il(Ii1i1ll1IiiIIIIIIiI[3], Illli1iI1lIilill11I) local Ii1iiiIllIIIiililI1 = lIl111IIIiiIiIl1Il1il(Ii1i1ll1IiiIIIIIIiI[4], Illli1iI1lIilill11I) Illli1iI1lIilill11I = (33 * Illli1iI1lIilill11I + IlllIIl1IIiII1iiIl1) % 256 return Ii1iiiIllIIIiililI1 * 16777216 + I11iIIi1llIl1Ii1i1l * 65536 + IiI1il111liiiii1II1 * 256 + llil1IlIlli1lI1Ill1 end local function lIllill1IllIIIlil1iII(lI11I111llill1iIiII) local lliII1lI1I1I11Ii1ii = IiIililiilIli1liilI() local lIlll1IIiIil1ilii11ll = "" for lIlil1iIiiiiI1ii1i1Il = 1, lliII1lI1I1I11Ii1ii do lIlll1IIiIil1ilii11ll = lIlll1IIiIil1ilii11ll .. IliilIi1I11iIiil1il(lIl111IIIiiIiIl1Il1il(l11lI1Ii1I1I11Ill11(IiIliii11IIl111iiiI, lilI11I1liIl11liIII + lIlil1iIiiiiI1ii1i1Il - 1), ii1lilllIilIIl1l1ll)) ii1lilllIilIIl1l1ll = (lI11I111llill1iIiII * ii1lilllIilIIl1l1ll + 179) % 256 end lilI11I1liIl11liIII = lilI11I1liIl11liIII + lliII1lI1I1I11Ii1ii return lIlll1IIiIil1ilii11ll end ii1lilllIilIIl1l1ll = iI111i1iI1il1I1i1lI() Illli1iI1lIilill11I = iI111i1iI1il1I1i1lI() local function IIIi1lil1Ii1IillliI() local IiII1I11i1lII1111i1 = { [26788] = {}, [54519] = {}, [10915] = {}, [107945] = {} } local IIIlli11lI1IllilI1l = IiIililiilIli1liilI() - (#{ 6606, 6669, 6098, 870, 5010, 6829, 957, 1476, 846, 539, 2779, 6136, 4678, 2899, 1442, 1874, 5348, 6498, 3247, 1874, 6886 } + I11iIlll1iii1ii1i11 + 133683) local I1lIlllI1iIiiIll11l = iI111i1iI1il1I1i1lI() for lIlil1iIiiiiI1ii1i1Il = iIlll111Ili1IiI11lI, IIIlli11lI1IllilI1l do local IlillI1Il111II111l1 = {} local II11IlilI1lIlIIlllI = liIl1I1liIlilIiilll(I1lIlllI1iIiiIll11l) IlillI1Il111II111l1[84286] = lIlil1liii11iilill1ii(II11IlilI1lIlIIlllI, #{6032}, #{ 2917, 5930, 2884, 4305, 1700, 2580, 4599, 5026, 2226 }) IlillI1Il111II111l1[89988] = lIlil1liii11iilill1ii(II11IlilI1lIlIIlllI, #{ 4796, 3909, 2946, 4286, 4718, 6151, 5794, 2550, 4962, 3311, 3001, 5323, 5025, 584, 3172, 3449, 203, 5082, 4586 }, #{ 343, 3716, 4504, 6580, 1728, 1662, 3137, 4210, 1870, 6333, 6559, 3090, 6336, 5954, 2444, 6093, 4700, 3025, 4198, 4855, 2421, 5938, 6234 } + I11iIlll1iii1ii1i11 + -44) IlillI1Il111II111l1[96221] = lIlil1liii11iilill1ii(II11IlilI1lIlIIlllI, #{ 852, 4300, 1468, 3718, 62, 1064, 5367, 2735, 779, 4219, 376, 6202, 5529, 4565, 2312, 2764, 28, 2723, 2759, 6014, 3481, 3077, 5684 } + I11iIlll1iii1ii1i11 + -43, #{ 772, 2043, 4220, 6872, 6417, 5636, 3897, 2059, 6687, 3199, 2029, 5903, 3905, 3933, 1308, 6143, 4097, 6624, 2576, 2727, 799, 1079 } + I11iIlll1iii1ii1i11 + -37) IlillI1Il111II111l1[53638] = lIlil1liii11iilill1ii(II11IlilI1lIlIIlllI, #{4818}, #{ 1593, 2630, 3863, 2293, 3005, 3756, 703, 1287, 6123, 4135, 1971, 563, 6011, 5394, 6305, 895, 5091, 2701 }) IlillI1Il111II111l1[64200] = lIlil1liii11iilill1ii(II11IlilI1lIlIIlllI, #{ 34, 6540, 2621, 4336, 253, 3987, 4333, 3290, 5511, 1506 }, #{ 1668, 2121, 3144, 4737, 1896, 5358, 355, 2371, 2416, 6812, 5797, 5293, 6634, 3928, 4621, 1179, 562, 3633 }) IlillI1Il111II111l1[121012] = lIlil1liii11iilill1ii(II11IlilI1lIlIIlllI, #{5339}, #{ 6516, 2922, 517, 2377, 5012, 242, 2796, 4867, 4727, 1071, 5298, 5521, 819, 2908, 6415, 6154, 2589, 6497 }) IiII1I11i1lII1111i1[54519][lIlil1iIiiiiI1ii1i1Il] = IlillI1Il111II111l1 end iI111i1iI1il1I1i1lI() IiII1I11i1lII1111i1[40071] = iI111i1iI1il1I1i1lI() IiIililiilIli1liilI() iI111i1iI1il1I1i1lI() IiIililiilIli1liilI() IiII1I11i1lII1111i1[17313] = iI111i1iI1il1I1i1lI() iI111i1iI1il1I1i1lI() IiIililiilIli1liilI() IiII1I11i1lII1111i1[111116] = iI111i1iI1il1I1i1lI() IiIililiilIli1liilI() local IIIlli11lI1IllilI1l = IiIililiilIli1liilI() - (#{ 6695, 3665, 5069, 3681, 6047, 3780, 466, 866, 3917, 5835, 3668, 2101, 1804, 763, 77, 280, 5771, 6658, 1354, 6792, 3517 } + I11iIlll1iii1ii1i11 + 133686) local IlIliiIilI11I111Ii1 = iI111i1iI1il1I1i1lI() for lIlil1iIiiiiI1ii1i1Il = iIlll111Ili1IiI11lI, IIIlli11lI1IllilI1l do local iiIi111liIi1II1Ilil = {} local lIli1IilIiIi1iliI1i = iI111i1iI1il1I1i1lI() if lIli1IilIiIi1iliI1i == #{ 4479, 746, 1404, 5167, 2442, 6077, 4537, 718, 3090, 5176, 2056, 3765, 1792, 1877, 3770, 5120, 900, 5816, 3939, 4297 } + I11iIlll1iii1ii1i11 + 185 then iiIi111liIi1II1Ilil[38633] = lIllill1IllIIIlil1iII(IlIliiIilI11I111Ii1) end if lIli1IilIiIi1iliI1i == #{ 3506, 1760, 6231, 6549, 4295, 1430, 6413, 2425, 4074, 86, 120, 2808, 5893, 6350, 4625, 6390, 2650, 4333, 3437, 835, 814 } + I11iIlll1iii1ii1i11 + 114 then iiIi111liIi1II1Ilil[38633] = #{ 4317, 1947, 1987, 3699, 2887, 6923, 4, 4623, 1755, 3978, 4798, 6737, 4003, 3116, 629, 1398, 4001, 6525, 303, 6812, 5414, 879, 963 } + I11iIlll1iii1ii1i11 + 76543 == #{ 4882, 2370, 1024, 4556, 2856, 2646, 65, 5705, 3511, 2286, 3105, 1404, 2048, 3169, 1703, 2425, 2863, 6742, 768, 3648, 5562, 6654, 4576 } + I11iIlll1iii1ii1i11 + 130794 end if lIli1IilIiIi1iliI1i == #{ 6093, 5814, 4360, 1697, 162, 3900, 6011, 4154, 1692, 4626, 1008, 1576, 4534, 4984, 4100, 606, 2224, 5336, 4754, 6254, 6472, 237, 5361 } + I11iIlll1iii1ii1i11 + 76 then iiIi111liIi1II1Ilil[38633] = #{ 4762, 2221, 4491, 5559, 6154, 5523, 703, 599, 1494, 1548, 6360, 5867, 1892, 1995, 6928, 4065, 5322, 6303, 1733, 1202, 136, 4797, 5889 } + I11iIlll1iii1ii1i11 + 79848 == #{ 4762, 2221, 4491, 5559, 6154, 5523, 703, 599, 1494, 1548, 6360, 5867, 1892, 1995, 6928, 4065, 5322, 6303, 1733, 1202, 136, 4797, 5889 } + I11iIlll1iii1ii1i11 + 79848 end if lIli1IilIiIi1iliI1i == #{ 4590, 2655, 4264, 2059, 4969, 2716, 1630, 6026, 3453, 5407, 3160, 1296, 3645, 2482, 2170, 2318, 893, 1818, 3091, 3036, 6965, 6770, 3771 } + I11iIlll1iii1ii1i11 + 154 then iiIi111liIi1II1Ilil[38633] = lIllill1IllIIIlil1iII(IlIliiIilI11I111Ii1) end if lIli1IilIiIi1iliI1i == #{ 580, 6289, 4014, 2217, 1347, 4445, 68, 6829, 6121, 2222, 5663, 3994, 3071, 6832, 5962, 3805, 862, 4634, 6524, 3073 } + I11iIlll1iii1ii1i11 + 78 then iiIi111liIi1II1Ilil[38633] = I1iill11i11IIilli11() end if lIli1IilIiIi1iliI1i == #{ 1952, 2167, 6345, 4330, 3569, 1950, 3715, 6664, 3168, 4660, 6474, 2461, 1190, 932, 502, 2523, 6061, 3292, 5672, 1354, 5482, 5988 } + I11iIlll1iii1ii1i11 + 55 then iiIi111liIi1II1Ilil[38633] = iI111i1iI1il1I1i1lI() + IiIililiilIli1liilI() + I1iill11i11IIilli11() end if lIli1IilIiIi1iliI1i == #{ 3942, 4276, 3296, 3289, 3448, 484, 5049, 4623, 5920, 4322, 4189, 3637, 1765, 6061, 948, 2242, 6300, 6227, 1017, 5466, 5185, 6275 } + I11iIlll1iii1ii1i11 + 139 then iiIi111liIi1II1Ilil[38633] = iI111i1iI1il1I1i1lI() + IiIililiilIli1liilI() + I1iill11i11IIilli11() end if lIli1IilIiIi1iliI1i == #{ 908, 4130, 4592, 4798, 1034, 5388, 54, 3031, 2795, 2007, 2821, 2226, 1113, 78, 1988, 5649, 4973, 3512, 4259, 4297, 1999, 3809 } + I11iIlll1iii1ii1i11 + -32 then iiIi111liIi1II1Ilil[38633] = iI111i1iI1il1I1i1lI() + IiIililiilIli1liilI() + I1iill11i11IIilli11() end if lIli1IilIiIi1iliI1i == #{ 2753, 1818, 4991, 5965 } then iiIi111liIi1II1Ilil[38633] = I1iill11i11IIilli11() + I1iill11i11IIilli11() end IiII1I11i1lII1111i1[107945][lIlil1iIiiiiI1ii1i1Il - iIlll111Ili1IiI11lI] = iiIi111liIi1II1Ilil end iI111i1iI1il1I1i1lI() IiIililiilIli1liilI() iI111i1iI1il1I1i1lI() local IIIlli11lI1IllilI1l = IiIililiilIli1liilI() for lIlil1iIiiiiI1ii1i1Il = iIlll111Ili1IiI11lI, IIIlli11lI1IllilI1l do IiII1I11i1lII1111i1[26788][lIlil1iIiiiiI1ii1i1Il - iIlll111Ili1IiI11lI] = IIIi1lil1Ii1IillliI() end iI111i1iI1il1I1i1lI() local IIIlli11lI1IllilI1l = IiIililiilIli1liilI() for lIlil1iIiiiiI1ii1i1Il = iIlll111Ili1IiI11lI, IIIlli11lI1IllilI1l do IiII1I11i1lII1111i1[10915][lIlil1iIiiiiI1ii1i1Il] = IiIililiilIli1liilI() end IiIililiilIli1liilI() return IiII1I11i1lII1111i1 end local function I1I11ii1lIl111iiiIi(IiII1I11i1lII1111i1, lIllii111lI1IIl1llII1, IliIil1Iil1lIIii1l1) local Il1IlilIiilIil1lii1, iiIIi1I1I1IiIilll11 = 2, 1 local llIiIiiIIIi1li1Iill = IiII1I11i1lII1111i1[54519] local Ii111IlIiIII11ll1II = lIlI1llli11Iii11IIl11({}, { __index = function(li11Ii1i1i11il1i1l1, illIiilIlIIlii1iIl1) local lIlll1IIiIil1ilii11ll = IiII1I11i1lII1111i1[107945][illIiilIlIIlii1iIl1] if lIlII11ll11il1IiIliiI(lIli1IilIiIi1iliI1i(lIlll1IIiIil1ilii11ll[38633]), 1, 1) == "s" then return { [38633] = lIlII11ll11il1IiIliiI(lIlll1IIiIil1ilii11ll[38633], 4) } end return lIlll1IIiIil1ilii11ll end }) local iilliIIIlIIIIi1iII1 = 17313 local I1I11lliIliIilIIl1i = IiII1I11i1lII1111i1[26788] local Iillll11l11li1i1lil = 38633 local iil11il1li111ii1Il1 = IiII1I11i1lII1111i1[111116] local iI1IllIlIlIl1iIlIli = IiII1I11i1lII1111i1[40071] local I1I1liIlIlIlIIIIiI1 = 96221 local i1l11111IiI1i1il1l1 = IiII1I11i1lII1111i1[10915] local i1iilI1IlI1i11il1Il = 84286 local function illIilii1lllII1l11l(...) local ii11Ii1IiI1I111l1li = 0 local I11lllilllliiIiIi11 = { lIlilliii1iIIIliI1iIi({}, 1, iI1IllIlIlIl1iIlIli) } local Ii1Il11l1iIIiliI11I = 1 local iiiiilIlIlIll1lIiIl = {} local lIliilI1il1llIiilll1i = {} local lIllii111lI1IIl1llII1 = II1IllIliIIlillI1il() local liil1lIIiIIIIIii1lI = { ... } local ll1IIi1iI1i111l1iil = #liil1lIIiIIIIIii1lI - 1 for lIlil1iIiiiiI1ii1i1Il = 0, ll1IIi1iI1i111l1iil do if lIlil1iIiiiiI1ii1i1Il < iil11il1li111ii1Il1 then I11lllilllliiIiIi11[lIlil1iIiiiiI1ii1i1Il] = liil1lIIiIIIIIii1lI[lIlil1iIiiiiI1ii1i1Il + 1] end end local function Iili1111iiI1Ii1I1I1(...) local I11iIIi1llIl1Ii1i1l = lIl1Iii1lIl11l1i1ii1I("#", ...) local li11Ii1i1i11il1i1l1 = { ... } return I11iIIi1llIl1Ii1i1l, li11Ii1i1i11il1i1l1 end local function lIl1Ilillilllll1l11i1() while true do local lIli11IIlIil1llii1lII = llIiIiiIIIi1li1Iill[Ii1Il11l1iIIiliI11I] local iiII11ll1i1iil11l11 = lIli11IIlIil1llii1lII[96221] Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I + 1 local lIliliiilIIli11i1ii1l = lIli11IIlIil1llii1lII[53638] local lIl1liliilIlIIllll1 = lIli11IIlIil1llii1lII[64200] local lI1IIIl1IIi1iiliilI = lIli11IIlIil1llii1lII[84286] local iI1IIlII11liIIl1ii1 = lIli11IIlIil1llii1lII[53638] - lIlI1illIlli11iIilIlI local lIllil1li1111Ili1IiII = lIli11IIlIil1llii1lII[89988] if iiII11ll1i1iil11l11 >= 18 then if iiII11ll1i1iil11l11 < 27 then if iiII11ll1i1iil11l11 < 22 then if iiII11ll1i1iil11l11 >= 20 then if iiII11ll1i1iil11l11 ~= 21 then I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = lI1IIIl1IIi1iiliilI ~= 0 if lIl1liliilIlIIllll1 ~= 0 then Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I + 1 end else I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = { lIlilliii1iIIIliI1iIi(Iil1IilIllilliIiIIl, 1, lI1IIIl1IIi1iiliilI == 0 and 255 or lI1IIIl1IIi1iiliilI) } end elseif iiII11ll1i1iil11l11 ~= 19 then if lI1IIIl1IIi1iiliilI > 255 then lI1IIIl1IIi1iiliilI = Ii111IlIiIII11ll1II[lI1IIIl1IIi1iiliilI - 256][Iillll11l11li1i1lil] else lI1IIIl1IIi1iiliilI = I11lllilllliiIiIi11[lI1IIIl1IIi1iiliilI] end if lIl1liliilIlIIllll1 > 255 then lIl1liliilIlIIllll1 = Ii111IlIiIII11ll1II[lIl1liliilIlIIllll1 - 256][Iillll11l11li1i1lil] else lIl1liliilIlIIllll1 = I11lllilllliiIiIi11[lIl1liliilIlIIllll1] end I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = lI1IIIl1IIi1iiliilI - lIl1liliilIlIIllll1 else local lIllIili1lIIliI1IiIil = I1I11lliIliIilIIl1i[lIliliiilIIli11i1ii1l] local IIilIillliIIIllIl1I = {} if lIllIili1lIIliI1IiIil[iilliIIIlIIIIi1iII1] > 0 then do local lIlli1IlIIliIIIIi1lli = {} IIilIillliIIIllIl1I = lIlI1llli11Iii11IIl11({}, { __index = function(li11Ii1i1i11il1i1l1, illIiilIlIIlii1iIl1) local illl1IIIl1lIiiIiIiI = lIlli1IlIIliIIIIi1lli[illIiilIlIIlii1iIl1] return illl1IIIl1lIiiIiIiI[1][illl1IIIl1lIiiIiIiI[2]] end, __newindex = function(li11Ii1i1i11il1i1l1, illIiilIlIIlii1iIl1, lIll11lIIlliiIlIIIlli) local illl1IIIl1lIiiIiIiI = lIlli1IlIIliIIIIi1lli[illIiilIlIIlii1iIl1] illl1IIIl1lIiiIiIiI[1][illl1IIIl1lIiiIiIiI[2]] = lIll11lIIlliiIlIIIlli end }) for lIlil1iIiiiiI1ii1i1Il = 1, lIllIili1lIIliI1IiIil[iilliIIIlIIIIi1iII1] do local li1IiIl1iill1IIliiI = llIiIiiIIIi1li1Iill[Ii1Il11l1iIIiliI11I] if li1IiIl1iill1IIliiI[I1I1liIlIlIlIIIIiI1] == Il1IlilIiilIil1lii1 then lIlli1IlIIliIIIIi1lli[lIlil1iIiiiiI1ii1i1Il - 1] = { I11lllilllliiIiIi11, li1IiIl1iill1IIliiI[i1iilI1IlI1i11il1Il] } elseif li1IiIl1iill1IIliiI[I1I1liIlIlIlIIIIiI1] == iiIIi1I1I1IiIilll11 then lIlli1IlIIliIIIIi1lli[lIlil1iIiiiiI1ii1i1Il - 1] = { IliIil1Iil1lIIii1l1, li1IiIl1iill1IIliiI[i1iilI1IlI1i11il1Il] } end Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I + 1 end if not iiiiilIlIlIll1lIiIl[I11lllilllliiIiIi11] then iiiiilIlIlIll1lIiIl[I11lllilllliiIiIi11] = {lIlli1IlIIliIIIIi1lli} else table.insert(iiiiilIlIlIll1lIiIl[I11lllilllliiIiIi11], lIlli1IlIIliIIIIi1lli) end end end local lIliil1lIlII1iililill = I1I11ii1lIl111iiiIi(lIllIili1lIIliI1IiIil, lIllii111lI1IIl1llII1, IIilIillliIIIllIl1I) I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = lIliil1lIlII1iililill end elseif iiII11ll1i1iil11l11 >= 24 then if iiII11ll1i1iil11l11 >= 25 then if iiII11ll1i1iil11l11 ~= 26 then if lI1IIIl1IIi1iiliilI > 255 then lI1IIIl1IIi1iiliilI = Ii111IlIiIII11ll1II[lI1IIIl1IIi1iiliilI - 256][Iillll11l11li1i1lil] else lI1IIIl1IIi1iiliilI = I11lllilllliiIiIi11[lI1IIIl1IIi1iiliilI] end if lIl1liliilIlIIllll1 > 255 then lIl1liliilIlIIllll1 = Ii111IlIiIII11ll1II[lIl1liliilIlIIllll1 - 256][Iillll11l11li1i1lil] else lIl1liliilIlIIllll1 = I11lllilllliiIiIi11[lIl1liliilIlIIllll1] end I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = lI1IIIl1IIi1iiliilI % lIl1liliilIlIIllll1 else local ili11IIllIiIIII1iii = I11lllilllliiIiIi11[lIllil1li1111Ili1IiII + 2] local lilI11I1liIl11liIII = I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] + ili11IIllIiIIII1iii I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = lilI11I1liIl11liIII if ili11IIllIiIIII1iii > 0 then if lilI11I1liIl11liIII <= I11lllilllliiIiIi11[lIllil1li1111Ili1IiII + 1] then Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I + iI1IIlII11liIIl1ii1 I11lllilllliiIiIi11[lIllil1li1111Ili1IiII + 3] = lilI11I1liIl11liIII end elseif lilI11I1liIl11liIII >= I11lllilllliiIiIi11[lIllil1li1111Ili1IiII + 1] then Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I + iI1IIlII11liIIl1ii1 I11lllilllliiIiIi11[lIllil1li1111Ili1IiII + 3] = lilI11I1liIl11liIII end end elseif not not I11lllilllliiIiIi11[lI1IIIl1IIi1iiliilI] == (lIl1liliilIlIIllll1 == 0) then Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I + 1 else I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = I11lllilllliiIiIi11[lI1IIIl1IIi1iiliilI] end elseif iiII11ll1i1iil11l11 == 23 then if lIl1liliilIlIIllll1 == 30 then Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I - 1 llIiIiiIIIi1li1Iill[Ii1Il11l1iIIiliI11I] = { [96221] = 1, [89988] = (lIllil1li1111Ili1IiII - 47) % 256, [84286] = (lI1IIIl1IIi1iiliilI - 47) % 256, [53638] = 0 } elseif lIl1liliilIlIIllll1 == 15 then Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I - 1 llIiIiiIIIi1li1Iill[Ii1Il11l1iIIiliI11I] = { [96221] = 22, [89988] = (lIllil1li1111Ili1IiII - 44) % 256, [84286] = (lI1IIIl1IIi1iiliilI - 44) % 256, [53638] = 0 } else local IIilI1il1IIIil1l111 = {} for iIlIli1I1ll11l11il1, lIlli1IlIIliIIIIi1lli in pairs(iiiiilIlIlIll1lIiIl[I11lllilllliiIiIi11]) do for iIlIli1I1ll11l11il1, illl1IIIl1lIiiIiIiI in pairs(lIlli1IlIIliIIIIi1lli) do if illl1IIIl1lIiiIiIiI[1] == I11lllilllliiIiIi11 and lIllil1li1111Ili1IiII <= illl1IIIl1lIiiIiIiI[2] then local IlIiIi11I1i1IlIiliI = illl1IIIl1lIiiIiIiI[2] if not IIilI1il1IIIil1l111[IlIiIi11I1i1IlIiliI] then table.insert(lIliilI1il1llIiilll1i, I11lllilllliiIiIi11[IlIiIi11I1i1IlIiliI]) IIilI1il1IIIil1l111[IlIiIi11I1i1IlIiliI] = #lIliilI1il1llIiilll1i end illl1IIIl1lIiiIiIiI[1] = lIliilI1il1llIiilll1i illl1IIIl1lIiiIiIiI[2] = IIilI1il1IIIil1l111[IlIiIi11I1i1IlIiliI] end end end end else IliIil1Iil1lIIii1l1[lI1IIIl1IIi1iiliilI] = I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] end elseif iiII11ll1i1iil11l11 < 32 then if iiII11ll1i1iil11l11 >= 29 then if iiII11ll1i1iil11l11 < 30 then Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I + iI1IIlII11liIIl1ii1 elseif iiII11ll1i1iil11l11 == 31 then local iiliIliI1IIli1lIiIi = I11lllilllliiIiIi11[lI1IIIl1IIi1iiliilI] for lIlil1iIiiiiI1ii1i1Il = lI1IIIl1IIi1iiliilI + 1, lIl1liliilIlIIllll1 do iiliIliI1IIli1lIiIi = iiliIliI1IIli1lIiIi .. I11lllilllliiIiIi11[lIlil1iIiiiiI1ii1i1Il] end I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = iiliIliI1IIli1lIiIi elseif lI1IIIl1IIi1iiliilI == 166 then Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I - 1 llIiIiiIIIi1li1Iill[Ii1Il11l1iIIiliI11I] = { [96221] = 15, [89988] = (lIllil1li1111Ili1IiII - 120) % 256, [84286] = (lIl1liliilIlIIllll1 - 120) % 256, [53638] = 0 } elseif lI1IIIl1IIi1iiliilI == 227 then Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I - 1 llIiIiiIIIi1li1Iill[Ii1Il11l1iIIiliI11I] = { [96221] = 7, [89988] = (lIllil1li1111Ili1IiII - 178) % 256, [84286] = (lIl1liliilIlIIllll1 - 178) % 256, [53638] = 0 } else local lIlI1IiI1ill1iI111IIl = lIllil1li1111Ili1IiII + 2 local iiliIliI1IIli1lIiIi = { I11lllilllliiIiIi11[lIllil1li1111Ili1IiII](I11lllilllliiIiIi11[lIllil1li1111Ili1IiII + 1], I11lllilllliiIiIi11[lIllil1li1111Ili1IiII + 2]) } for lIlil1iIiiiiI1ii1i1Il = 1, lIl1liliilIlIIllll1 do I11lllilllliiIiIi11[lIlI1IiI1ill1iI111IIl + lIlil1iIiiiiI1ii1i1Il] = iiliIliI1IIli1lIiIi[lIlil1iIiiiiI1ii1i1Il] end if I11lllilllliiIiIi11[lIllil1li1111Ili1IiII + 3] ~= nil then I11lllilllliiIiIi11[lIllil1li1111Ili1IiII + 2] = I11lllilllliiIiIi11[lIllil1li1111Ili1IiII + 3] else Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I + 1 end end elseif iiII11ll1i1iil11l11 == 28 then if not not I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] == (lIl1liliilIlIIllll1 == 0) then Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I + 1 end else local I1Il1Ii1liiI1iliilI, lIl1i11IlIl1iIiIl1llI, lIl1Ilillilllll1l11i1 if lI1IIIl1IIi1iiliilI ~= 1 then if lI1IIIl1IIi1iiliilI ~= 0 then lIl1i11IlIl1iIiIl1llI = lIllil1li1111Ili1IiII + lI1IIIl1IIi1iiliilI - 1 else lIl1i11IlIl1iIiIl1llI = ii11Ii1IiI1I111l1li end lIl1i11IlIl1iIiIl1llI, I1Il1Ii1liiI1iliilI = Iili1111iiI1Ii1I1I1(I11lllilllliiIiIi11[lIllil1li1111Ili1IiII](lIlilliii1iIIIliI1iIi(I11lllilllliiIiIi11, lIllil1li1111Ili1IiII + 1, lIl1i11IlIl1iIiIl1llI))) else lIl1i11IlIl1iIiIl1llI, I1Il1Ii1liiI1iliilI = Iili1111iiI1Ii1I1I1(I11lllilllliiIiIi11[lIllil1li1111Ili1IiII]()) end if lIl1liliilIlIIllll1 ~= 1 then if lIl1liliilIlIIllll1 ~= 0 then lIl1i11IlIl1iIiIl1llI = lIllil1li1111Ili1IiII + lIl1liliilIlIIllll1 - 2 ii11Ii1IiI1I111l1li = lIl1i11IlIl1iIiIl1llI + 1 else lIl1i11IlIl1iIiIl1llI = lIl1i11IlIl1iIiIl1llI + lIllil1li1111Ili1IiII - 1 ii11Ii1IiI1I111l1li = lIl1i11IlIl1iIiIl1llI end lIl1Ilillilllll1l11i1 = 0 for lIlil1iIiiiiI1ii1i1Il = lIllil1li1111Ili1IiII, lIl1i11IlIl1iIiIl1llI do lIl1Ilillilllll1l11i1 = lIl1Ilillilllll1l11i1 + 1 I11lllilllliiIiIi11[lIlil1iIiiiiI1ii1i1Il] = I1Il1Ii1liiI1iliilI[lIl1Ilillilllll1l11i1] end else ii11Ii1IiI1I111l1li = lIllil1li1111Ili1IiII - 1 end for lIlil1iIiiiiI1ii1i1Il = ii11Ii1IiI1I111l1li + 1, iI1IllIlIlIl1iIlIli do I11lllilllliiIiIi11[lIlil1iIiiiiI1ii1i1Il] = nil end end elseif iiII11ll1i1iil11l11 >= 34 then if iiII11ll1i1iil11l11 < 35 then if lI1IIIl1IIi1iiliilI > 255 then lI1IIIl1IIi1iiliilI = Ii111IlIiIII11ll1II[lI1IIIl1IIi1iiliilI - 256][Iillll11l11li1i1lil] else lI1IIIl1IIi1iiliilI = I11lllilllliiIiIi11[lI1IIIl1IIi1iiliilI] end if lIl1liliilIlIIllll1 > 255 then lIl1liliilIlIIllll1 = Ii111IlIiIII11ll1II[lIl1liliilIlIIllll1 - 256][Iillll11l11li1i1lil] else lIl1liliilIlIIllll1 = I11lllilllliiIiIi11[lIl1liliilIlIIllll1] end if lI1IIIl1IIi1iiliilI < lIl1liliilIlIIllll1 ~= (lIllil1li1111Ili1IiII ~= 0) then Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I + 1 end elseif iiII11ll1i1iil11l11 ~= 36 then I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = lIllii111lI1IIl1llII1[Ii111IlIiIII11ll1II[lIliliiilIIli11i1ii1l][Iillll11l11li1i1lil]] elseif lIl1liliilIlIIllll1 == 143 then Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I - 1 llIiIiiIIIi1li1Iill[Ii1Il11l1iIIiliI11I] = { [96221] = 32, [89988] = (lIllil1li1111Ili1IiII - 63) % 256, [84286] = (lI1IIIl1IIi1iiliilI - 63) % 256, [53638] = 0 } else I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = #I11lllilllliiIiIi11[lI1IIIl1IIi1iiliilI] end elseif iiII11ll1i1iil11l11 == 33 then if lIl1liliilIlIIllll1 > 255 then lIl1liliilIlIIllll1 = Ii111IlIiIII11ll1II[lIl1liliilIlIIllll1 - 256][Iillll11l11li1i1lil] else lIl1liliilIlIIllll1 = I11lllilllliiIiIi11[lIl1liliilIlIIllll1] end I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = I11lllilllliiIiIi11[lI1IIIl1IIi1iiliilI][lIl1liliilIlIIllll1] else iiiiilIlIlIll1lIiIl[I11lllilllliiIiIi11] = nil if lI1IIIl1IIi1iiliilI == 1 then return true end local lIl1i11IlIl1iIiIl1llI = lIllil1li1111Ili1IiII + lI1IIIl1IIi1iiliilI - 2 if lI1IIIl1IIi1iiliilI == 0 then lIl1i11IlIl1iIiIl1llI = ii11Ii1IiI1I111l1li end return true, lIllil1li1111Ili1IiII, lIl1i11IlIl1iIiIl1llI end elseif iiII11ll1i1iil11l11 < 9 then if iiII11ll1i1iil11l11 < 4 then if iiII11ll1i1iil11l11 >= 2 then if iiII11ll1i1iil11l11 == 3 then lI1IIIl1IIi1iiliilI = I11lllilllliiIiIi11[lI1IIIl1IIi1iiliilI] if lIl1liliilIlIIllll1 > 255 then lIl1liliilIlIIllll1 = Ii111IlIiIII11ll1II[lIl1liliilIlIIllll1 - 256][Iillll11l11li1i1lil] else lIl1liliilIlIIllll1 = I11lllilllliiIiIi11[lIl1liliilIlIIllll1] end I11lllilllliiIiIi11[lIllil1li1111Ili1IiII + 1] = lI1IIIl1IIi1iiliilI I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = lI1IIIl1IIi1iiliilI[lIl1liliilIlIIllll1] else I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = I11lllilllliiIiIi11[lI1IIIl1IIi1iiliilI] end elseif iiII11ll1i1iil11l11 == 1 then if lIl1liliilIlIIllll1 == 219 then Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I - 1 llIiIiiIIIi1li1Iill[Ii1Il11l1iIIiliI11I] = { [96221] = 2, [89988] = (lIllil1li1111Ili1IiII - 59) % 256, [84286] = (lI1IIIl1IIi1iiliilI - 59) % 256, [53638] = 0 } elseif lIl1liliilIlIIllll1 == 228 then Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I - 1 llIiIiiIIIi1li1Iill[Ii1Il11l1iIIiliI11I] = { [96221] = 36, [89988] = (lIllil1li1111Ili1IiII - 29) % 256, [84286] = (lI1IIIl1IIi1iiliilI - 29) % 256, [53638] = 0 } else I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = IliIil1Iil1lIIii1l1[lI1IIIl1IIi1iiliilI] end else if lI1IIIl1IIi1iiliilI > 255 then lI1IIIl1IIi1iiliilI = Ii111IlIiIII11ll1II[lI1IIIl1IIi1iiliilI - 256][Iillll11l11li1i1lil] else lI1IIIl1IIi1iiliilI = I11lllilllliiIiIi11[lI1IIIl1IIi1iiliilI] end if lIl1liliilIlIIllll1 > 255 then lIl1liliilIlIIllll1 = Ii111IlIiIII11ll1II[lIl1liliilIlIIllll1 - 256][Iillll11l11li1i1lil] else lIl1liliilIlIIllll1 = I11lllilllliiIiIi11[lIl1liliilIlIIllll1] end I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = lI1IIIl1IIi1iiliilI / lIl1liliilIlIIllll1 end elseif iiII11ll1i1iil11l11 >= 6 then if iiII11ll1i1iil11l11 >= 7 then if iiII11ll1i1iil11l11 ~= 8 then local lIlIIl1llIIi1llI1lI1I = lI1IIIl1IIi1iiliilI > 0 and lI1IIIl1IIi1iiliilI - 1 or ll1IIi1iI1i111l1iil - iil11il1li111ii1Il1 if lIlIIl1llIIi1llI1lI1I < 0 then lIlIIl1llIIi1llI1lI1I = -1 end for lIlil1iIiiiiI1ii1i1Il = lIllil1li1111Ili1IiII, lIllil1li1111Ili1IiII + lIlIIl1llIIi1llI1lI1I do I11lllilllliiIiIi11[lIlil1iIiiiiI1ii1i1Il] = liil1lIIiIIIIIii1lI[iil11il1li111ii1Il1 + (lIlil1iIiiiiI1ii1i1Il - lIllil1li1111Ili1IiII) + 1] end if lI1IIIl1IIi1iiliilI == 0 then ii11Ii1IiI1I111l1li = lIllil1li1111Ili1IiII + lIlIIl1llIIi1llI1lI1I for lIlil1iIiiiiI1ii1i1Il = ii11Ii1IiI1I111l1li + 1, iI1IllIlIlIl1iIlIli do I11lllilllliiIiIi11[lIlil1iIiiiiI1ii1i1Il] = nil end end else if lI1IIIl1IIi1iiliilI > 255 then lI1IIIl1IIi1iiliilI = Ii111IlIiIII11ll1II[lI1IIIl1IIi1iiliilI - 256][Iillll11l11li1i1lil] else lI1IIIl1IIi1iiliilI = I11lllilllliiIiIi11[lI1IIIl1IIi1iiliilI] end if lIl1liliilIlIIllll1 > 255 then lIl1liliilIlIIllll1 = Ii111IlIiIII11ll1II[lIl1liliilIlIIllll1 - 256][Iillll11l11li1i1lil] else lIl1liliilIlIIllll1 = I11lllilllliiIiIi11[lIl1liliilIlIIllll1] end I11lllilllliiIiIi11[lIllil1li1111Ili1IiII][lI1IIIl1IIi1iiliilI] = lIl1liliilIlIIllll1 end else if lI1IIIl1IIi1iiliilI > 255 then lI1IIIl1IIi1iiliilI = Ii111IlIiIII11ll1II[lI1IIIl1IIi1iiliilI - 256][Iillll11l11li1i1lil] else lI1IIIl1IIi1iiliilI = I11lllilllliiIiIi11[lI1IIIl1IIi1iiliilI] end if lIl1liliilIlIIllll1 > 255 then lIl1liliilIlIIllll1 = Ii111IlIiIII11ll1II[lIl1liliilIlIIllll1 - 256][Iillll11l11li1i1lil] else lIl1liliilIlIIllll1 = I11lllilllliiIiIi11[lIl1liliilIlIIllll1] end if lI1IIIl1IIi1iiliilI <= lIl1liliilIlIIllll1 ~= (lIllil1li1111Ili1IiII ~= 0) then Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I + 1 end end elseif iiII11ll1i1iil11l11 ~= 5 then if lIl1liliilIlIIllll1 == 240 then Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I - 1 llIiIiiIIIi1li1Iill[Ii1Il11l1iIIiliI11I] = { [96221] = 30, [89988] = (lIllil1li1111Ili1IiII - 127) % 256, [64200] = (lI1IIIl1IIi1iiliilI - 127) % 256, [53638] = 0 } else I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = -I11lllilllliiIiIi11[lI1IIIl1IIi1iiliilI] end else if lI1IIIl1IIi1iiliilI > 255 then lI1IIIl1IIi1iiliilI = Ii111IlIiIII11ll1II[lI1IIIl1IIi1iiliilI - 256][Iillll11l11li1i1lil] else lI1IIIl1IIi1iiliilI = I11lllilllliiIiIi11[lI1IIIl1IIi1iiliilI] end if lIl1liliilIlIIllll1 > 255 then lIl1liliilIlIIllll1 = Ii111IlIiIII11ll1II[lIl1liliilIlIIllll1 - 256][Iillll11l11li1i1lil] else lIl1liliilIlIIllll1 = I11lllilllliiIiIi11[lIl1liliilIlIIllll1] end I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = lI1IIIl1IIi1iiliilI ^ lIl1liliilIlIIllll1 end elseif iiII11ll1i1iil11l11 >= 13 then if iiII11ll1i1iil11l11 < 15 then if iiII11ll1i1iil11l11 ~= 14 then lIllii111lI1IIl1llII1[Ii111IlIiIII11ll1II[lIliliiilIIli11i1ii1l][Iillll11l11li1i1lil]] = I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] else local lIlI1IiI1ill1iI111IIl = (lIl1liliilIlIIllll1 - 1) * 50 if lI1IIIl1IIi1iiliilI == 0 then lI1IIIl1IIi1iiliilI = ii11Ii1IiI1I111l1li - lIllil1li1111Ili1IiII end for lIlil1iIiiiiI1ii1i1Il = 1, lI1IIIl1IIi1iiliilI do I11lllilllliiIiIi11[lIllil1li1111Ili1IiII][lIlI1IiI1ill1iI111IIl + lIlil1iIiiiiI1ii1i1Il] = I11lllilllliiIiIi11[lIllil1li1111Ili1IiII + lIlil1iIiiiiI1ii1i1Il] end end elseif iiII11ll1i1iil11l11 < 16 then if lIl1liliilIlIIllll1 == 138 then Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I - 1 llIiIiiIIIi1li1Iill[Ii1Il11l1iIIiliI11I] = { [96221] = 28, [89988] = (lIllil1li1111Ili1IiII - 160) % 256, [64200] = (lI1IIIl1IIi1iiliilI - 160) % 256, [53638] = 0 } elseif lIl1liliilIlIIllll1 == 179 then Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I - 1 llIiIiiIIIi1li1Iill[Ii1Il11l1iIIiliI11I] = { [96221] = 23, [89988] = (lIllil1li1111Ili1IiII - 137) % 256, [84286] = (lI1IIIl1IIi1iiliilI - 137) % 256, [53638] = 0 } else for lIlil1iIiiiiI1ii1i1Il = lIllil1li1111Ili1IiII, lI1IIIl1IIi1iiliilI do I11lllilllliiIiIi11[lIlil1iIiiiiI1ii1i1Il] = nil end end elseif iiII11ll1i1iil11l11 == 17 then I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = not I11lllilllliiIiIi11[lI1IIIl1IIi1iiliilI] else I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = Ii111IlIiIII11ll1II[lIliliiilIIli11i1ii1l][Iillll11l11li1i1lil] end elseif iiII11ll1i1iil11l11 < 11 then if iiII11ll1i1iil11l11 ~= 10 then if lI1IIIl1IIi1iiliilI > 255 then lI1IIIl1IIi1iiliilI = Ii111IlIiIII11ll1II[lI1IIIl1IIi1iiliilI - 256][Iillll11l11li1i1lil] else lI1IIIl1IIi1iiliilI = I11lllilllliiIiIi11[lI1IIIl1IIi1iiliilI] end if lIl1liliilIlIIllll1 > 255 then lIl1liliilIlIIllll1 = Ii111IlIiIII11ll1II[lIl1liliilIlIIllll1 - 256][Iillll11l11li1i1lil] else lIl1liliilIlIIllll1 = I11lllilllliiIiIi11[lIl1liliilIlIIllll1] end I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = lI1IIIl1IIi1iiliilI + lIl1liliilIlIIllll1 else I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = iiiliilI1iIi11ii1l1(iIiI1iiIIiIIIl1Illi(I11lllilllliiIiIi11[lIllil1li1111Ili1IiII]), "`for` initial value must be a number") I11lllilllliiIiIi11[lIllil1li1111Ili1IiII + 1] = iiiliilI1iIi11ii1l1(iIiI1iiIIiIIIl1Illi(I11lllilllliiIiIi11[lIllil1li1111Ili1IiII + 1]), "`for` limit value must be a number") I11lllilllliiIiIi11[lIllil1li1111Ili1IiII + 2] = iiiliilI1iIi11ii1l1(iIiI1iiIIiIIIl1Illi(I11lllilllliiIiIi11[lIllil1li1111Ili1IiII + 2]), "`for` step value must be a number") I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] - I11lllilllliiIiIi11[lIllil1li1111Ili1IiII + 2] Ii1Il11l1iIIiliI11I = Ii1Il11l1iIIiliI11I + iI1IIlII11liIIl1ii1 end elseif iiII11ll1i1iil11l11 ~= 12 then if lI1IIIl1IIi1iiliilI > 255 then lI1IIIl1IIi1iiliilI = Ii111IlIiIII11ll1II[lI1IIIl1IIi1iiliilI - 256][Iillll11l11li1i1lil] else lI1IIIl1IIi1iiliilI = I11lllilllliiIiIi11[lI1IIIl1IIi1iiliilI] end if lIl1liliilIlIIllll1 > 255 then lIl1liliilIlIIllll1 = Ii111IlIiIII11ll1II[lIl1liliilIlIIllll1 - 256][Iillll11l11li1i1lil] else lIl1liliilIlIIllll1 = I11lllilllliiIiIi11[lIl1liliilIlIIllll1] end I11lllilllliiIiIi11[lIllil1li1111Ili1IiII] = lI1IIIl1IIi1iiliilI * lIl1liliilIlIIllll1 else iiiiilIlIlIll1lIiIl[I11lllilllliiIiIi11] = nil local I1Il1Ii1liiI1iliilI, lIl1i11IlIl1iIiIl1llI if lI1IIIl1IIi1iiliilI ~= 1 then if lI1IIIl1IIi1iiliilI ~= 0 then lIl1i11IlIl1iIiIl1llI = lIllil1li1111Ili1IiII + lI1IIIl1IIi1iiliilI - 1 else lIl1i11IlIl1iIiIl1llI = ii11Ii1IiI1I111l1li end lIl1i11IlIl1iIiIl1llI, I1Il1Ii1liiI1iliilI = Iili1111iiI1Ii1I1I1(I11lllilllliiIiIi11[lIllil1li1111Ili1IiII](lIlilliii1iIIIliI1iIi(I11lllilllliiIiIi11, lIllil1li1111Ili1IiII + 1, lIl1i11IlIl1iIiIl1llI))) else lIl1i11IlIl1iIiIl1llI, I1Il1Ii1liiI1iliilI = Iili1111iiI1Ii1I1I1(I11lllilllliiIiIi11[lIllil1li1111Ili1IiII]()) end I11lllilllliiIiIi11 = I1Il1Ii1liiI1iliilI return true, 1, lIl1i11IlIl1iIiIl1llI end end end local lIllI1I1i11lI1II11i1l, lIlll1IIiIil1ilii11ll, I1lIilII1i1Illl1lIl, Iiii11Iiiiii1iIiII1 = llilIl11l1Il1II111l(lIl1Ilillilllll1l11i1) if lIllI1I1i11lI1II11i1l then if I1lIilII1i1Illl1lIl then return lIlilliii1iIIIliI1iIi(I11lllilllliiIiIi11, I1lIilII1i1Illl1lIl, Iiii11Iiiiii1iIiII1) end else li1ill1ii1iIll1IilI("Luraph Script:" .. (i1l11111IiI1i1il1l1[Ii1Il11l1iIIiliI11I - 1] or "") .. ": " .. lIliii11lIl11i1iIl1II(lIlll1IIiIil1ilii11ll), 0) end end lIl1IIIllIIIl1iIIiIll(illIilii1lllII1l11l, lIllii111lI1IIl1llII1) return illIilii1lllII1l11l end local IIilI1il1IIIil1l111 = IIIi1lil1Ii1IillliI() return I1I11ii1lIl111iiiIi(IIilI1il1IIIil1l111, lIllii111lI1IIl1llII1)() end lIi1i11l1Ili1I11lIillIliIIlillI1il()) 